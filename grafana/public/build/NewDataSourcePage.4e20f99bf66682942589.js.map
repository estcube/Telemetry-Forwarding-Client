{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/plugins/PluginSignatureBadge.tsx","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/core/components/Card/Card.tsx"],"names":["buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","plugin","find","info","links","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","isNaN","initDataSourceSettingsFailed","Error","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","console","error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","get","dsApi","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","statusText","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","getPluginSettings","pluginInfo","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","length","nameExits","findNewName","post","updateLocation","path","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","nameHasSuffix","getNewName","digit","getLastDigit","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","NewDataSourcePage","onDataSourceTypeClicked","props","onSearchQueryChange","value","setDataSourceTypeSearchQuery","onLearnMoreClick","evt","stopPropagation","this","items","getItemKey","toString","renderItem","DataSourceTypeCard","onClick","map","className","key","renderPlugins","variant","href","target","rel","navModel","isLoading","searchQuery","Contents","onChange","placeholder","renderCategories","PureComponent","isPhantom","learnMoreLink","ariaLabel","selectors","pages","AddDataSource","dataSourcePlugins","logoUrl","actions","icon","labels","status","signature","aria-label","getNavModel","main","text","subTitle","node","mapDispatchToProps","hot","connect","state","getDataSourcePlugins","dataSourceTypeSearchQuery","isLoadingDataSources","pluginMeta","meta","img","breadcrumbs","children","active","configPages","page","includes","undefined","include","licenseInfo","hasLicense","featureToggles","datasourceInsights","getDataSourceLoadingNav","pageName","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","secureJsonFields","child","indexOf","PluginSignatureBadge","display","PluginSignatureStatus","invalid","internal","color","tooltip","valid","modified","getSignatureDisplayModel","displayName","getDataSources","regex","RegExp","test","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount","Card","mainClassName","cx","src"],"mappings":"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","file":"NewDataSourcePage.4e20f99bf66682942589.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter(item => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration & data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = (await getBackendSrv().get(`/api/datasources/${id}`)) as DataSourceSettings;\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { FC, PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { Button, LinkButton, List } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport Page from 'app/core/components/Page/Page';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\nimport { PluginSignatureBadge } from '../plugins/PluginSignatureBadge';\nimport { Card } from 'app/core/components/Card/Card';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={item => item.id.toString()}\n        renderItem={item => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map(category => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <LinkButton\n            variant=\"secondary\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <FilterInput value={searchQuery} onChange={this.onSearchQueryChange} placeholder=\"Filter by name or type\" />\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton href=\"datasources\">Cancel</LinkButton>\n          </div>\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom ? props.onClick : () => {};\n\n  // find first plugin info link\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0] : null;\n\n  return (\n    <Card\n      title={plugin.name}\n      description={plugin.info.description}\n      ariaLabel={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n      logoUrl={plugin.info.logos.small}\n      actions={\n        <>\n          {learnMoreLink && (\n            <LinkButton\n              variant=\"secondary\"\n              href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n              target=\"_blank\"\n              rel=\"noopener\"\n              onClick={onLearnMoreClick}\n              icon=\"external-link-alt\"\n            >\n              {learnMoreLink.name}\n            </LinkButton>\n          )}\n          {!isPhantom && <Button>Select</Button>}\n        </>\n      }\n      labels={\n        !isPhantom && (\n          <div>\n            <PluginSignatureBadge status={plugin.signature} />\n          </div>\n        )\n      }\n      className={isPhantom ? 'add-data-source-item--phantom' : ''}\n      onClick={onClick}\n      aria-label={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n    />\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    if (config.featureToggles.datasourceInsights) {\n      navModel.children!.push({\n        active: false,\n        icon: 'info-circle',\n        id: `datasource-insights-${dataSource.id}`,\n        text: 'Insights',\n        url: `datasources/edit/${dataSource.id}/insights`,\n      });\n    }\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import React from 'react';\nimport { Badge, BadgeProps } from '@grafana/ui';\nimport { PluginSignatureStatus } from '@grafana/data';\n\ninterface Props {\n  status?: PluginSignatureStatus;\n}\n\nexport const PluginSignatureBadge: React.FC<Props> = ({ status }) => {\n  const display = getSignatureDisplayModel(status);\n  return <Badge text={display.text} color={display.color} icon={display.icon} tooltip={display.tooltip} />;\n};\n\nfunction getSignatureDisplayModel(signature?: PluginSignatureStatus): BadgeProps {\n  if (!signature) {\n    signature = PluginSignatureStatus.invalid;\n  }\n\n  switch (signature) {\n    case PluginSignatureStatus.internal:\n      return { text: 'Core', icon: 'cube', color: 'blue', tooltip: 'Core plugin that is bundled with Grafana' };\n    case PluginSignatureStatus.valid:\n      return { text: 'Signed', icon: 'lock', color: 'green', tooltip: 'Signed and verified plugin' };\n    case PluginSignatureStatus.invalid:\n      return {\n        text: 'Invalid',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Invalid plugin signature',\n      };\n    case PluginSignatureStatus.modified:\n      return {\n        text: 'Modified',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Valid signature but content has been modified',\n      };\n  }\n\n  return { text: 'Unsigned', icon: 'exclamation-triangle', color: 'red', tooltip: 'Unsigned external plugin' };\n}\n\nPluginSignatureBadge.displayName = 'PluginSignatureBadge';\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import React from 'react';\nimport { cx } from 'emotion';\n\nexport interface CardProps {\n  logoUrl?: string;\n  title: string;\n  description?: string;\n  labels?: React.ReactNode;\n  actions?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  logoUrl,\n  title,\n  description,\n  labels,\n  actions,\n  onClick,\n  ariaLabel,\n  className,\n}) => {\n  const mainClassName = cx('add-data-source-item', className);\n\n  return (\n    <div className={mainClassName} onClick={onClick} aria-label={ariaLabel}>\n      {logoUrl && <img className=\"add-data-source-item-logo\" src={logoUrl} />}\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{title}</span>\n        {description && <span className=\"add-data-source-item-desc\">{description}</span>}\n        {labels && <div>{labels}</div>}\n      </div>\n      {actions && <div className=\"add-data-source-item-actions\">{actions}</div>}\n    </div>\n  );\n};\n"],"sourceRoot":""}