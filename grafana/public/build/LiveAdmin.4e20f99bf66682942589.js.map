{"version":3,"sources":["webpack:///./public/app/features/admin/LiveAdmin.tsx","webpack:///./public/app/features/admin/LivePanel.tsx"],"names":["LiveAdmin","state","channel","text","onChannelChanged","v","value","setState","onTextChanged","event","target","onPublish","msg","line","getGrafanaLiveSrv","publish","then","console","log","navModel","this","props","channels","label","description","current","find","f","push","Contents","grow","title","featureState","FeatureState","alpha","options","onChange","allowCustomValue","onClick","variant","PureComponent","hot","module","connect","getNavModel","navIndex","LivePanel","connected","count","lastTime","lastBody","observer","next","Date","now","JSON","stringify","startSubscription","subscription","unsubscribe","undefined","srv","isConnected","stream","getChannelStream","subscribe","setTimeout","componentDidMount","oldProps"],"mappings":"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","file":"LiveAdmin.4e20f99bf66682942589.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { NavModel, SelectableValue, FeatureState } from '@grafana/data';\nimport { LivePanel } from './LivePanel';\nimport { Select, Input, Button, FeatureInfoBox, Container } from '@grafana/ui';\nimport { getGrafanaLiveSrv } from '@grafana/runtime';\n\ninterface Props {\n  navModel: NavModel;\n}\n\ninterface State {\n  channel: string;\n  text: string;\n}\n\nexport class LiveAdmin extends PureComponent<Props, State> {\n  state: State = {\n    channel: 'random-2s-stream',\n    text: '', // publish text to a channel\n  };\n\n  onChannelChanged = (v: SelectableValue<string>) => {\n    if (v.value) {\n      this.setState({\n        channel: v.value,\n      });\n    }\n  };\n\n  onTextChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ text: event.target.value });\n  };\n\n  onPublish = () => {\n    const { text, channel } = this.state;\n    if (text) {\n      const msg = {\n        line: text,\n      };\n\n      const srv = getGrafanaLiveSrv();\n      srv.publish(channel, msg).then(v => {\n        console.log('PUBLISHED', text, v);\n      });\n    }\n    this.setState({ text: '' });\n  };\n\n  render() {\n    const { navModel } = this.props;\n    const { channel, text } = this.state;\n\n    const channels: Array<SelectableValue<string>> = [\n      {\n        label: 'random-2s-stream',\n        value: 'random-2s-stream',\n        description: 'Random stream that updates every 2s',\n      },\n      {\n        label: 'random-flakey-stream',\n        value: 'random-flakey-stream',\n        description: 'Random stream with intermittent updates',\n      },\n      {\n        label: 'example-chat',\n        value: 'example-chat',\n        description: 'A channel that expects chat messages',\n      },\n    ];\n    let current = channels.find(f => f.value === channel);\n    if (!current) {\n      current = {\n        label: channel,\n        value: channel,\n      };\n      channels.push(current);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <Container grow={1}>\n            <FeatureInfoBox\n              title=\"Grafana Live\"\n              featureState={FeatureState.alpha}\n              // url={getDocsLink(DocsId.Transformations)}\n            >\n              <p>\n                This supports real-time event streams in grafana core. This feature is under heavy development. Expect\n                the intefaces and structures to change as this becomes more production ready.\n              </p>\n            </FeatureInfoBox>\n            <br />\n            <br />\n          </Container>\n\n          <h2>Channels</h2>\n          <Select options={channels} value={current} onChange={this.onChannelChanged} allowCustomValue={true} />\n          <br />\n\n          <LivePanel channel={channel} />\n\n          <br />\n          <br />\n          <h3>Write to channel</h3>\n          <Input value={text} onChange={this.onTextChanged} />\n          <Button onClick={this.onPublish} variant={text ? 'primary' : 'secondary'}>\n            Publish\n          </Button>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'live'),\n});\n\nexport default hot(module)(connect(mapStateToProps)(LiveAdmin));\n","import React, { PureComponent } from 'react';\nimport { Unsubscribable, PartialObserver } from 'rxjs';\nimport { getGrafanaLiveSrv } from '@grafana/runtime';\n\ninterface Props {\n  channel: string;\n}\n\ninterface State {\n  connected: boolean;\n  count: number;\n  lastTime: number;\n  lastBody: string;\n}\n\nexport class LivePanel extends PureComponent<Props, State> {\n  state: State = {\n    connected: false,\n    count: 0,\n    lastTime: 0,\n    lastBody: '',\n  };\n  subscription?: Unsubscribable;\n\n  observer: PartialObserver<any> = {\n    next: (msg: any) => {\n      this.setState({\n        count: this.state.count + 1,\n        lastTime: Date.now(),\n        lastBody: JSON.stringify(msg),\n      });\n    },\n  };\n\n  startSubscription = () => {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n\n    const srv = getGrafanaLiveSrv();\n    if (srv.isConnected()) {\n      const stream = srv.getChannelStream(this.props.channel);\n      this.subscription = stream.subscribe(this.observer);\n      this.setState({ connected: true, count: 0, lastTime: 0, lastBody: '' });\n      return;\n    }\n    console.log('Not yet connected... try again...');\n    setTimeout(this.startSubscription, 200);\n  };\n\n  componentDidMount = () => {\n    this.startSubscription();\n  };\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    if (oldProps.channel !== this.props.channel) {\n      this.startSubscription();\n    }\n  }\n\n  render() {\n    const { lastBody, lastTime, count } = this.state;\n\n    return (\n      <div>\n        <h5>Count: {count}</h5>\n        {lastTime > 0 && (\n          <>\n            <h5>Last: {lastTime}</h5>\n            {lastBody && (\n              <div>\n                <pre>{lastBody}</pre>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}