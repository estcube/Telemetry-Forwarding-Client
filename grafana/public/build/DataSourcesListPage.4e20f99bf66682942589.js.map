{"version":3,"sources":["webpack:///./public/app/features/datasources/DataSourcesListItem.tsx","webpack:///./public/app/features/datasources/DataSourcesList.tsx","webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/features/datasources/DataSourcesListPage.tsx"],"names":["DataSourcesListItem","dataSource","this","props","className","href","id","type","src","typeLogoUrl","alt","name","aria-label","selectors","pages","DataSources","dataSources","isDefault","url","PureComponent","DataSourcesList","layoutMode","listStyle","classNames","LayoutModes","Grid","List","map","index","key","buildCategories","plugins","categories","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","description","imgUrl","category","plugin","find","info","links","push","PluginType","datasource","module","baseUrl","logos","small","large","author","screenshots","updated","version","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","isNaN","initDataSourceSettingsFailed","Error","dataSourceSettings","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","console","error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","get","dsApi","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","statusText","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","getPluginSettings","pluginInfo","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","length","nameExits","findNewName","post","updateLocation","path","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","nameHasSuffix","getNewName","digit","getLastDigit","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","OrgActionBar","searchQuery","linkButton","setSearchQuery","target","linkProps","labelClassName","inputClassName","value","onChange","placeholder","pluginMeta","meta","navModel","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","licenseInfo","hasLicense","featureToggles","datasourceInsights","getDataSourceLoadingNav","pageName","node","main","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","user","secureJsonFields","child","indexOf","getDataSources","state","regex","RegExp","test","getDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","dataSourcesCount","emptyListModel","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","fetchDataSources","setDataSourcesSearchQuery","hasFetched","Contents","isLoading","query","mapDispatchToProps","setDataSourcesLayoutMode","hot","connect","getNavModel","navIndex"],"mappings":"6hCAQO,IA2BQA,EA3Bf,6E,UAAA,O,kOAAA,M,EAAA,G,EAAA,gCACW,IACCC,EAAeC,KAAKC,MAApBF,WACR,OACE,wBAAIG,UAAU,qBACZ,uBAAGA,UAAU,YAAYC,KAAI,2BAAsBJ,EAAWK,KAC5D,yBAAKF,UAAU,oBACb,yBAAKA,UAAU,kBAAkBH,EAAWM,OAE9C,yBAAKH,UAAU,kBACb,4BAAQA,UAAU,oBAChB,yBAAKI,IAAKP,EAAWQ,YAAaC,IAAKT,EAAWU,QAEpD,yBAAKP,UAAU,qBACb,yBAAKA,UAAU,iBAAiBQ,aAAYC,YAAUC,MAAMC,YAAYC,YAAYf,EAAWU,OAC5FV,EAAWU,KACXV,EAAWgB,WAAa,0BAAMb,UAAU,+CAAhB,YAE3B,yBAAKA,UAAU,sBAAsBH,EAAWiB,c,2BAlB9D,GAAyCC,iB,i5BCQlC,IAAMC,EAAb,6E,UAAA,O,kOAAA,M,EAAA,G,EAAA,gCACW,MAC6BlB,KAAKC,MAAjCa,EADD,EACCA,YAAaK,EADd,EACcA,WAEfC,EAAYC,IAAW,CAC3B,gBAAgB,EAChB,wBAAyBF,IAAeG,IAAYC,KACpD,wBAAyBJ,IAAeG,IAAYE,OAGtD,OACE,6BAAStB,UAAWkB,GAClB,wBAAIlB,UAAU,aACXY,EAAYW,KAAI,SAAC1B,EAAY2B,GAC5B,OAAO,kBAAC,EAAD,CAAqB3B,WAAYA,EAAY4B,IAAG,UAAK5B,EAAWK,GAAhB,YAAsBsB,e,2BAdzF,GAAqCT,iBAsBtBC,O,oJCnCR,SAASU,EAAgBC,GAC9B,IAAMC,EAAyC,CAC7C,CAAE1B,GAAI,OAAQ2B,MAAO,wBAAyBF,QAAS,IACvD,CAAEzB,GAAI,UAAW2B,MAAO,+BAAgCF,QAAS,IACjE,CAAEzB,GAAI,UAAW2B,MAAO,sBAAuBF,QAAS,IACxD,CAAEzB,GAAI,MAAO2B,MAAO,MAAOF,QAAS,IACpC,CAAEzB,GAAI,QAAS2B,MAAO,QAASF,QAAS,IACxC,CAAEzB,GAAI,aAAc2B,MAAO,qBAAsBF,QAAS,IAC1D,CAAEzB,GAAI,QAAS2B,MAAO,SAAUF,QAAS,KACzCG,QAAO,SAAAC,GAAI,OAAIA,KAEXC,EAA0D,GAC1DC,EAAoD,GACpDC,EAyEC,CACLC,EAAiB,CACfjC,GAAI,4BACJK,KAAM,SACN6B,YAAa,kCACbC,OAAQ,2CAEVF,EAAiB,CACfjC,GAAI,4BACJK,KAAM,SACN6B,YAAa,iCACbC,OAAQ,kCAEVF,EAAiB,CACfjC,GAAI,+BACJK,KAAM,YACN6B,YAAa,qCACbC,OAAQ,qCAEVF,EAAiB,CACfjC,GAAI,gCACJkC,YAAa,uCACb7B,KAAM,aACN8B,OAAQ,sCAEVF,EAAiB,CACfjC,GAAI,6BACJkC,YAAa,oCACb7B,KAAM,UACN8B,OAAQ,mCAEVF,EAAiB,CACfjC,GAAI,8BACJkC,YAAa,sCACb7B,KAAM,YACN8B,OAAQ,oCAEVF,EAAiB,CACfjC,GAAI,iCACJkC,YAAa,wCACb7B,KAAM,cACN8B,OAAQ,wCA/H+E,uBAgB3F,YAAuBT,EAAvB,+CAAmC,KAAxBU,EAAwB,QACjCN,EAAcM,EAASpC,IAAMoC,GAjB4D,6GAoB3F,IApB2F,IAoB3F,EApB2F,iBAoBhFC,EApBgF,QA2BzF,GALIL,EAAkBM,MAAK,SAAAT,GAAI,OAAIA,EAAK7B,KAAOqC,EAAOrC,QACpDqC,EAAOD,SAAW,cAIhBC,EAAOE,KAAKC,MAAO,4BACrB,YAAmBH,EAAOE,KAAKC,MAA/B,+CAAsC,SAC/BnC,KAAO,cAFO,oFAMNqB,EAAWY,MAAK,SAAAT,GAAI,OAAIA,EAAK7B,KAAOqC,EAAOD,aAAaN,EAAa,OAC7EL,QAAQgB,KAAKJ,GAEtBN,EAAYM,EAAOrC,IAAMqC,GAhB3B,EAAqBZ,EAArB,+CAA8B,IApB6D,6GAuC3F,YAAuBC,EAAvB,+CAAmC,KAAxBU,EAAwB,QAOjC,GALoB,UAAhBA,EAASpC,IACXoC,EAASX,QAAQgB,KA2Fd,CACLzC,GAAI,SACJK,KAAM,gBACNJ,KAAMyC,aAAWC,WACjBC,OAAQ,UACRC,QAAS,GACTN,KAAM,CACJL,YAAa,uCACbY,MAAO,CAAEC,MAAO,8BAA+BC,MAAO,OACtDC,OAAQ,CAAE5C,KAAM,gBAChBmC,MAAO,CACL,CACE5B,IAAK,sCACLP,KAAM,eAGV6C,YAAa,GACbC,QAAS,aACTC,QAAS,WAzGS,eAAhBhB,EAASpC,GAAqB,4BAChC,YAAqBgC,EAArB,+CAAwC,KAA7BK,EAA6B,QACjCN,EAAYM,EAAOrC,KACtBoC,EAASX,QAAQgB,KAAKJ,IAHM,mFAQlCgB,EAAYjB,EAASX,UAtDoE,kFAyD3F,OAAOC,EAGT,SAAS2B,EAAY5B,GACnB,IAAM6B,EAAyC,CAC7CC,WAAY,IACZC,SAAU,GACVC,KAAM,GACNC,MAAO,GACPC,OAAQ,IACRC,SAAU,GACVC,QAAS,GAGXpC,EAAQqC,MAAK,SAACC,EAAGC,GACf,IAAMC,EAAQX,EAAaS,EAAE/D,KAAO,EAC9BkE,EAAQZ,EAAaU,EAAEhE,KAAO,EACpC,OAAIiE,EAAQC,GACF,EAEND,EAAQC,EACH,EAGFH,EAAE1D,KAAO2D,EAAE3D,MAAQ,EAAI,KAkFlC,SAAS4B,EAAiBkC,GACxB,MAAO,CACLnE,GAAImE,EAAQnE,GACZK,KAAM8D,EAAQ9D,KACdJ,KAAMyC,aAAWC,WACjBC,OAAQ,UACRC,QAAS,GACTN,KAAM,CACJL,YAAaiC,EAAQjC,YACrBY,MAAO,CAAEC,MAAOoB,EAAQhC,OAAQa,MAAOmB,EAAQhC,QAC/Cc,OAAQ,CAAE5C,KAAM,gBAChBmC,MAAO,CACL,CACE5B,IAAK,uCAAyCuD,EAAQnE,GACtDK,KAAM,gBAGV6C,YAAa,GACbC,QAAS,aACTC,QAAS,U,4lBC/IR,IAAMgB,EAAyB,SACpCC,GAOsB,IANtBC,EAMsB,uDAN4B,CAChDC,iBACAC,kBACAC,sBACAC,4BAGF,mDAAO,WAAOC,EAAyBC,GAAhC,8FACDC,MAAMR,GADL,uBAEHM,EAASG,YAA6B,IAAIC,MAAM,gBAF7C,mDAOGJ,EAASL,EAAaC,eAAeF,IAPxC,WAQCO,IAAWI,mBAAmB3C,OAR/B,wDAYG1C,EAAa2E,EAAaE,cAAcI,IAAWlE,YAAa2D,GAChEY,EAAiBX,EAAaG,kBAAkBG,IAAWlE,YAAaf,EAAYM,MAbvF,UAc0BqE,EAAaI,uBAAuBO,GAd9D,QAcGC,EAdH,OAgBHP,EAASQ,YAAgCD,IAhBtC,kDAkBHE,QAAQC,MAAM,iCAAd,MACAV,EAASG,YAA6B,EAAD,KAnBlC,0DAAP,0DAwBWQ,EAAiB,SAC5BC,GAKsB,IAJtBjB,EAIsB,uDAJqB,CACzCkB,qBACAC,mBAGF,mDAAO,WAAOd,EAAyBC,GAAhC,sGACeN,EAAakB,mBAAmBE,IAAIH,GADnD,WACCI,EADD,QAGMC,eAHN,iDAOLjB,EAASkB,eAETvB,EAAamB,gBAAgBK,mBAA7B,2BAAgD,8HAEvBH,EAAMC,iBAFiB,OAEtCG,EAFsC,OAI5CpB,EAASqB,YAAwBD,IAJW,gDAMxCE,EAAU,GAGZA,EADE,KAAIC,WACI,cAAgB,KAAIA,WAEpB,KAAID,QAGhBtB,EAASwB,YAAqB,CAAEF,aAdY,0DAT3C,2CAAP,0DA6BK,SAASG,IACd,mDAAO,WAAMzB,GAAN,sGACkBc,cAAgBC,IAAI,oBADtC,OACCW,EADD,OAEL1B,EAAS2B,YAAkBD,IAFtB,2CAAP,sDAMK,SAAS9B,EAAevE,GAC7B,mDAAO,WAAM2E,GAAN,0GACqBc,cAAgBC,IAAhB,2BAAwC1F,IAD7D,cACCL,EADD,gBAEqB4G,YAAkB5G,EAAWM,MAFlD,cAECuG,EAFD,gBAGgB9B,YAAuB8B,GAHvC,OAGCnE,EAHD,OAKLsC,EAAS8B,YAAiB9G,IAC1BgF,EAAS+B,YAAqBF,IAC9B7B,EAASgC,YAAeC,YAAcjH,EAAY0C,KAP7C,4CAAP,sDAWK,SAASwE,EAAcxE,GAC5B,mDAAO,WAAOsC,EAAUmC,GAAjB,0GACCnC,EAASyB,KADV,cAGC1F,EAAcoG,IAAWpG,YAAYA,YAErCqG,EAAc,CAClB1G,KAAMgC,EAAOhC,KACbJ,KAAMoC,EAAOrC,GACbgH,OAAQ,QACRrG,UAAkC,IAAvBD,EAAYuG,QAGrBC,EAAUxG,EAAaqG,EAAY1G,QACrC0G,EAAY1G,KAAO8G,EAAYzG,EAAaqG,EAAY1G,OAbrD,SAgBgBoF,cAAgB2B,KAAK,mBAAoBL,GAhBzD,OAgBChB,EAhBD,OAiBLpB,EAAS0C,YAAe,CAAEC,KAAM,qBAAF,OAAuBvB,EAAO/F,OAjBvD,2CAAP,wDAqBK,SAASuH,IACd,mDAAO,WAAM5C,GAAN,+FACLA,EAAS6C,eADJ,SAEiB/B,cAAgBC,IAAI,eAAgB,CAAE+B,QAAS,EAAGxH,KAAM,eAFzE,OAECwB,EAFD,OAGCC,EAAaF,EAAgBC,GACnCkD,EAAS+C,YAAwB,CAAEjG,UAASC,gBAJvC,2CAAP,sDAQK,SAASiG,EAAiBhI,GAC/B,mDAAO,WAAMgF,GAAN,gGACCc,cAAgBmC,IAAhB,2BAAwCjI,EAAWK,IAAML,GAD1D,uBAECkI,IAFD,gCAGElD,EAASJ,EAAe5E,EAAWK,MAHrC,2CAAP,sDAOK,SAAS8H,IACd,mDAAO,WAAOnD,EAAUmC,GAAjB,6FACCnH,EAAamH,IAAWpG,YAAYf,WADrC,SAEC8F,cAAgBsC,OAAhB,2BAA2CpI,EAAWK,KAFvD,uBAGC6H,IAHD,OAILlD,EAAS0C,YAAe,CAAEC,KAAM,kBAJ3B,2CAAP,wDAYK,SAASJ,EAAUxG,EAA6BL,GACrD,OACEK,EAAYkB,QAAO,SAAAjC,GACjB,OAAOA,EAAWU,KAAK2H,gBAAkB3H,EAAK2H,iBAC7Cf,OAAS,EAIT,SAASE,EAAYzG,EAA6BL,GAGvD,KAAO6G,EAAUxG,EAAaL,IAU1BA,EAPG4H,EAAc5H,GAOV,GAAH,OAAM6H,EAAW7H,IAAjB,QAyBkB8H,EAzB0BC,EAAa/H,GA0B1DwE,MAAMsD,GAAS,EAAIA,EAAQ,IAhCvB,GAAH,OAAM9H,EAAN,MA+BV,IAA4B8H,EArB1B,OAAO9H,EAGT,SAASwH,IACP,OAAOpC,cACJC,IAAI,0BACJ2C,MAAK,SAACC,GACLC,IAAOC,YAAcF,EAASE,YAC9BD,IAAOE,kBAAoBH,EAASG,kBACpCjD,cAAmBkD,UAIzB,SAAST,EAAc5H,GACrB,OAAOA,EAAKsI,SAAS,IAAKtI,EAAK4G,OAAS,GAG1C,SAASmB,EAAa/H,GACpB,OAAOuI,SAASvI,EAAKwI,OAAO,GAAI,IAOlC,SAASX,EAAW7H,GAClB,OAAOA,EAAKwI,MAAM,EAAGxI,EAAK4G,OAAS,K,ggCC9NhB6B,E,6WACV,MACqDlJ,KAAKC,MAAzDkJ,EADD,EACCA,YAAaC,EADd,EACcA,WAAYC,EAD1B,EAC0BA,eAAgBC,EAD1C,EAC0CA,OAC3CC,EAAY,CAAEpJ,KAAMiJ,EAAWjJ,MAMrC,OAJImJ,IACDC,EAAkBD,OAASA,GAI5B,yBAAKpJ,UAAU,mBACb,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CACEsJ,eAAe,0BACfC,eAAe,yBACfC,MAAOP,EACPQ,SAAUN,EACVO,YAAa,4BAGjB,yBAAK1J,UAAU,4BACf,kBAAC,aAAeqJ,EAAYH,EAAWrH,a,8BArBLd,kB,kCCX1C,gGAIO,SAAS+F,EAAcjH,EAAgC0C,GAC5D,IAAMoH,EAAapH,EAAOqH,KAEpBC,EAAyB,CAC7BC,IAAKH,EAAWlH,KAAKO,MAAME,MAC3BhD,GAAI,cAAgBL,EAAWK,GAC/B6J,SAAU,SAAF,OAAWJ,EAAWpJ,MAC9BO,IAAK,GACLkJ,KAAMnK,EAAWU,KACjB0J,YAAa,CAAC,CAAEpI,MAAO,eAAgBf,IAAK,gBAC5CoJ,SAAU,CACR,CACEC,QAAQ,EACRC,KAAM,gBACNlK,GAAI,uBAAF,OAAyBL,EAAWK,IACtC8J,KAAM,WACNlJ,IAAK,oBAAF,OAAsBjB,EAAWK,GAAjC,QAKT,GAAIqC,EAAO8H,YAAa,4BACtB,YAAmB9H,EAAO8H,YAA1B,+CAAuC,KAA5BC,EAA4B,QACrCT,EAASK,SAAUvH,KAAK,CACtBwH,QAAQ,EACRH,KAAMM,EAAKzI,MACXuI,KAAME,EAAKF,KACXtJ,IAAK,oBAAF,OAAsBjB,EAAWK,GAAjC,kBAA6CoK,EAAKpK,IACrDA,GAAI,mBAAF,OAAqBoK,EAAKpK,OAPV,mFA0CxB,OA9BIyJ,EAAWY,eAuGNC,IAvGgCb,EAAWY,SAqGzC/H,MAAK,SAAAiI,GACZ,MAAwB,cAAjBA,EAAQtK,SArGjB0J,EAASK,SAAUvH,KAAK,CACtBwH,QAAQ,EACRC,KAAM,OACNlK,GAAI,yBAAF,OAA2BL,EAAWK,IACxC8J,KAAM,aACNlJ,IAAK,oBAAF,OAAsBjB,EAAWK,GAAjC,iBAIHuI,IAAOiC,YAAYC,aACrBd,EAASK,SAAUvH,KAAK,CACtBwH,QAAQ,EACRC,KAAM,OACNlK,GAAI,0BAAF,OAA4BL,EAAWK,IACzC8J,KAAM,cACNlJ,IAAK,oBAAF,OAAsBjB,EAAWK,GAAjC,kBAGDuI,IAAOmC,eAAeC,oBACxBhB,EAASK,SAAUvH,KAAK,CACtBwH,QAAQ,EACRC,KAAM,cACNlK,GAAI,uBAAF,OAAyBL,EAAWK,IACtC8J,KAAM,WACNlJ,IAAK,oBAAF,OAAsBjB,EAAWK,GAAjC,gBAKF2J,EAGF,SAASiB,EAAwBC,GACtC,IAgDIC,EAhDEC,EAAOnE,EACX,CACEI,OAAQ,GACRgE,WAAW,EACXC,cAAe,GACfC,kBAAmB,GACnBC,iBAAiB,EACjBC,SAAU,GACVpL,GAAI,EACJW,WAAW,EACX0K,SAAU,CAAEC,SAAU,cAAeC,cAAe,aACpDlL,KAAM,UACNmL,MAAO,EACPC,SAAU,GACVC,UAAU,EACVzL,KAAM,UACNE,YAAa,gCACbS,IAAK,GACL+K,KAAM,GACNC,iBAAkB,IAEpB,CACElC,KAAM,CACJ1J,GAAI,IACJC,KAAMyC,aAAWC,WACjBtC,KAAM,GACNkC,KAAM,CACJU,OAAQ,CACN5C,KAAM,GACNO,IAAK,IAEPsB,YAAa,GACbM,MAAO,CAAC,CAAEnC,KAAM,GAAIO,IAAK,KACzBkC,MAAO,CACLE,MAAO,GACPD,MAAO,IAETG,YAAa,GACbC,QAAS,GACTC,QAAS,IAEXiH,SAAU,GACVzH,OAAQ,GACRC,QAAS,MA5CmD,uBAoDlE,YAAoBkI,EAAKf,SAAzB,+CAAoC,KAAzB6B,EAAyB,QAClC,GAAIA,EAAM7L,GAAI8L,QAAQjB,GAAY,EAAG,CACnCgB,EAAM5B,QAAS,EACfa,EAAOe,EACP,QAxD8D,kFA4DlE,MAAO,CACLd,KAAMA,EACND,KAAMA,K,kCCjIV,8OAAO,IAAMiB,EAAiB,SAACC,GAC7B,IAAMC,EAAQ,IAAIC,OAAOF,EAAMjD,YAAa,KAE5C,OAAOiD,EAAMtL,YAAYkB,QAAO,SAACjC,GAC/B,OAAOsM,EAAME,KAAKxM,EAAWU,OAAS4L,EAAME,KAAKxM,EAAWyL,WAAaa,EAAME,KAAKxM,EAAWM,UAItFmM,EAAuB,SAACJ,GACnC,IAAMC,EAAQ,IAAIC,OAAOF,EAAMK,0BAA2B,KAE1D,OAAOL,EAAMvK,QAAQG,QAAO,SAAC3B,GAC3B,OAAOgM,EAAME,KAAKlM,EAAKI,UAIdmE,EAAgB,SAACwH,EAAyBM,GACrD,OAAIN,EAAMrM,WAAWK,KAAO4I,SAAS0D,EAAwB,IACpDN,EAAMrM,WAER,IAGI8E,EAAoB,SAACuH,EAAyB/L,GACzD,OAAI+L,EAAM/G,eAAejF,KAAOC,EACvB+L,EAAM/G,eAGR,IAGIsH,EAA4B,SAACP,GAAD,OAA6BA,EAAMjD,aAC/DyD,EAA2B,SAACR,GAAD,OAA6BA,EAAMjL,YAC9D0L,EAAsB,SAACT,GAAD,OAA6BA,EAAMU,mB,wvCCEtE,IAAMC,EAAiB,CACrBhL,MAAO,wCACPiL,WAAY,WACZC,WAAY,kBACZC,YAAa,kBACbC,OAAQ,gEACRC,WAAY,8FACZC,gBAAiB,aACjBC,aAAc,UAGHC,EAAb,6E,YAAA,S,kOAAA,M,EAAA,G,EAAA,2CAEIvN,KAAKwN,qBAFT,+B,EAAA,sIAMiBxN,KAAKC,MAAMuG,kBAN5B,yF,8KAAA,4EASW,MASHxG,KAAKC,MAPPa,EAFK,EAELA,YACAgM,EAHK,EAGLA,iBACA/C,EAJK,EAILA,SACA5I,EALK,EAKLA,WACAgI,EANK,EAMLA,YACAsE,EAPK,EAOLA,0BACAC,EARK,EAQLA,WAQF,OACE,kBAAC,IAAD,CAAM3D,SAAUA,GACd,kBAAC,IAAK4D,SAAN,CAAeC,WAAYF,GACzB,oCACGA,GAAmC,IAArBZ,GAA0B,kBAAC,IAAiBC,GAC1DW,GACCZ,EAAmB,GAAK,CACtB,kBAAC,IAAD,CACE3D,YAAaA,EACbE,eAAgB,SAAAwE,GAAK,OAAIJ,EAA0BI,IACnDzE,WAfK,CACjBjJ,KAAM,kBACN4B,MAAO,mBAcKJ,IAAI,eAEN,kBAAC,IAAD,CAAiBb,YAAaA,EAAaK,WAAYA,EAAYQ,IAAI,kB,2BAtCvF,GAAyCV,iBA0DzC,IAAM6M,EAAqB,CACzBtH,oBACAiH,8BACAM,8BAGaC,wBAAIhL,EAAJgL,CAAYC,mBAjB3B,SAAyB7B,GACvB,MAAO,CACLrC,SAAUmE,YAAY9B,EAAM+B,SAAU,eACtCrN,YAAaqL,YAAeC,EAAMtL,aAClCK,WAAYyL,YAAyBR,EAAMtL,aAC3CgM,iBAAkBD,YAAoBT,EAAMtL,aAC5CqI,YAAawD,YAA0BP,EAAMtL,aAC7C4M,WAAYtB,EAAMtL,YAAY4M,cAUkBI,EAAzBG,CAA6CV,K","file":"DataSourcesListPage.4e20f99bf66682942589.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { DataSourceSettings } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport class DataSourcesListItem extends PureComponent<Props> {\n  render() {\n    const { dataSource } = this.props;\n    return (\n      <li className=\"card-item-wrapper\">\n        <a className=\"card-item\" href={`datasources/edit/${dataSource.id}`}>\n          <div className=\"card-item-header\">\n            <div className=\"card-item-type\">{dataSource.type}</div>\n          </div>\n          <div className=\"card-item-body\">\n            <figure className=\"card-item-figure\">\n              <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\n            </figure>\n            <div className=\"card-item-details\">\n              <div className=\"card-item-name\" aria-label={selectors.pages.DataSources.dataSources(dataSource.name)}>\n                {dataSource.name}\n                {dataSource.isDefault && <span className=\"btn btn-secondary btn-small card-item-label\">default</span>}\n              </div>\n              <div className=\"card-item-sub-name\">{dataSource.url}</div>\n            </div>\n          </div>\n        </a>\n      </li>\n    );\n  }\n}\n\nexport default DataSourcesListItem;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport DataSourcesListItem from './DataSourcesListItem';\n\n// Types\nimport { DataSourceSettings } from '@grafana/data';\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\n\nexport interface Props {\n  dataSources: DataSourceSettings[];\n  layoutMode: LayoutMode;\n}\n\nexport class DataSourcesList extends PureComponent<Props> {\n  render() {\n    const { dataSources, layoutMode } = this.props;\n\n    const listStyle = classNames({\n      'card-section': true,\n      'card-list-layout-grid': layoutMode === LayoutModes.Grid,\n      'card-list-layout-list': layoutMode === LayoutModes.List,\n    });\n\n    return (\n      <section className={listStyle}>\n        <ol className=\"card-list\">\n          {dataSources.map((dataSource, index) => {\n            return <DataSourcesListItem dataSource={dataSource} key={`${dataSource.id}-${index}`} />;\n          })}\n        </ol>\n      </section>\n    );\n  }\n}\n\nexport default DataSourcesList;\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter(item => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration & data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = (await getBackendSrv().get(`/api/datasources/${id}`)) as DataSourceSettings;\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { PureComponent } from 'react';\nimport { FilterInput } from '../FilterInput/FilterInput';\nimport { LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Search by name or type'}\n          />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton {...linkProps}>{linkButton.title}</LinkButton>\n      </div>\n    );\n  }\n}\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    if (config.featureToggles.datasourceInsights) {\n      navModel.children!.push({\n        active: false,\n        icon: 'info-circle',\n        id: `datasource-insights-${dataSource.id}`,\n        text: 'Insights',\n        url: `datasources/edit/${dataSource.id}/insights`,\n      });\n    }\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport DataSourcesList from './DataSourcesList';\n// Types\nimport { DataSourceSettings, NavModel } from '@grafana/data';\nimport { IconName } from '@grafana/ui';\nimport { StoreState } from 'app/types';\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\n// Actions\nimport { loadDataSources } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadDataSources: typeof loadDataSources;\n  setDataSourcesLayoutMode: typeof setDataSourcesLayoutMode;\n  setDataSourcesSearchQuery: typeof setDataSourcesSearchQuery;\n}\n\nconst emptyListModel = {\n  title: 'There are no data sources defined yet',\n  buttonIcon: 'database' as IconName,\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.fetchDataSources();\n  }\n\n  async fetchDataSources() {\n    return await this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      hasFetched,\n    } = this.props;\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyListModel} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <OrgActionBar\n                  searchQuery={searchQuery}\n                  setSearchQuery={query => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourcesListPage));\n"],"sourceRoot":""}