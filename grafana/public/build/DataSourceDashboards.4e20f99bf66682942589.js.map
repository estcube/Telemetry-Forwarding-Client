{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/DataSourceDashboards.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/features/datasources/DashboardsTable.tsx"],"names":["buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","plugin","find","info","links","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","isNaN","initDataSourceSettingsFailed","Error","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","console","error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","get","dsApi","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","statusText","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","getPluginSettings","pluginInfo","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","length","nameExits","findNewName","post","updateLocation","path","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","nameHasSuffix","getNewName","digit","getLastDigit","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","DataSourceDashboards","onImport","dashboard","overwrite","props","importDashboard","data","pluginId","inputs","value","onRemove","removeDashboard","importedUri","this","loadPluginDashboards","dashboards","navModel","isLoading","Contents","PureComponent","mapDispatchToProps","hot","connect","state","getRouteParamsId","location","getNavModel","navIndex","isLoadingPluginDashboards","pluginMeta","meta","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","licenseInfo","hasLicense","featureToggles","datasourceInsights","getDataSourceLoadingNav","pageName","node","main","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","secureJsonFields","child","indexOf","getDataSources","regex","RegExp","searchQuery","test","getDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount","DashboardsTable","className","map","index","key","dashboardId","imported","href","importedUrl","style","textAlign","onClick","revision","importedRevision","buttonText"],"mappings":"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","file":"DataSourceDashboards.4e20f99bf66682942589.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter(item => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration & data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = (await getBackendSrv().get(`/api/datasources/${id}`)) as DataSourceSettings;\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport DashboardTable from './DashboardsTable';\n\n// Actions & Selectors\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { loadDataSource } from './state/actions';\nimport { loadPluginDashboards } from '../plugins/state/actions';\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\nimport { getDataSource } from './state/selectors';\n\n// Types\nimport { PluginDashboard, StoreState } from 'app/types';\nimport { DataSourceSettings } from '@grafana/data';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  navModel: NavModel;\n  dashboards: PluginDashboard[];\n  dataSource: DataSourceSettings;\n  pageId: number;\n  importDashboard: typeof importDashboard;\n  loadDataSource: typeof loadDataSource;\n  loadPluginDashboards: typeof loadPluginDashboards;\n  removeDashboard: typeof removeDashboard;\n  isLoading: boolean;\n}\n\nexport class DataSourceDashboards extends PureComponent<Props> {\n  async componentDidMount() {\n    const { loadDataSource, pageId } = this.props;\n\n    await loadDataSource(pageId);\n    this.props.loadPluginDashboards();\n  }\n\n  onImport = (dashboard: PluginDashboard, overwrite: boolean) => {\n    const { dataSource, importDashboard } = this.props;\n    const data: any = {\n      pluginId: dashboard.pluginId,\n      path: dashboard.path,\n      overwrite,\n      inputs: [],\n    };\n\n    if (dataSource) {\n      data.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: dataSource.type,\n        value: dataSource.name,\n      });\n    }\n\n    importDashboard(data, dashboard.title);\n  };\n\n  onRemove = (dashboard: PluginDashboard) => {\n    this.props.removeDashboard(dashboard.importedUri);\n  };\n\n  render() {\n    const { dashboards, navModel, isLoading } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <DashboardTable\n            dashboards={dashboards}\n            onImport={(dashboard, overwrite) => this.onImport(dashboard, overwrite)}\n            onRemove={dashboard => this.onRemove(dashboard)}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  return {\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${pageId}`),\n    pageId: pageId,\n    dashboards: state.plugins.dashboards,\n    dataSource: getDataSource(state.dataSources, pageId),\n    isLoading: state.plugins.isLoadingPluginDashboards,\n  };\n}\n\nconst mapDispatchToProps = {\n  importDashboard,\n  loadDataSource,\n  loadPluginDashboards,\n  removeDashboard,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourceDashboards));\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    if (config.featureToggles.datasourceInsights) {\n      navModel.children!.push({\n        active: false,\n        icon: 'info-circle',\n        id: `datasource-insights-${dataSource.id}`,\n        text: 'Insights',\n        url: `datasources/edit/${dataSource.id}/insights`,\n      });\n    }\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import React, { FC } from 'react';\nimport { PluginDashboard } from '../../types';\nimport { Icon } from '@grafana/ui';\n\nexport interface Props {\n  dashboards: PluginDashboard[];\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <Icon name=\"apps\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </button>\n                ) : (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </button>\n                )}\n                {dashboard.imported && (\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\n                    <Icon name=\"trash-alt\" />\n                  </button>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DashboardsTable;\n"],"sourceRoot":""}