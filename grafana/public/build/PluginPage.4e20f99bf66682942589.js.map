{"version":3,"sources":["webpack:///./public/app/features/plugins/PluginDashboards.tsx","webpack:///./public/app/features/plugins/wrappers/AppConfigWrapper.tsx","webpack:///./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack:///./public/app/features/plugins/PluginPage.tsx","webpack:///./node_modules/lodash/assignIn.js","webpack:///./public/app/features/datasources/DashboardsTable.tsx","webpack:///./node_modules/lodash/extend.js"],"names":["PluginDashboards","props","importAll","importNext","index","dashboards","state","import","then","length","Promise","resolve","setTimeout","dash","overwrite","plugin","datasource","installCmd","pluginId","id","path","inputs","push","name","type","meta","value","getBackendSrv","post","res","appEvents","emit","AppEvents","alertSuccess","title","extend","setState","remove","delete","importedUri","imported","loading","this","get","className","onImport","onRemove","PureComponent","AppConfigCtrlWrapper","element","preUpdateHook","postUpdateHook","update","model","updateCmd","enabled","pinned","jsonData","secureJsonData","window","location","href","setPreUpdateHook","callback","setPostUpdateHook","importDashboards","deprecationWarning","enable","disable","angularCtrl","refresh","prevProps","cloneDeep","app","scopeProps","ctrl","getAngularLoader","load","withRightMargin","css","marginRight","ref","variant","onClick","PluginHelp","isError","isLoading","help","loadHelp","response","helpHtml","renderMarkdown","constructPlaceholderInfo","catch","dangerouslySetInnerHTML","__html","getLoadingNav","node","text","icon","main","loadPlugin","getPluginSettings","info","PluginType","importAppPlugin","importDataSourcePlugin","panel","importPanelPlugin","renderer","reject","PluginPage","showUpdateInfo","CoreEvents","showModal","src","nav","defaultPage","query","$contextSrv","appSubUrl","config","getNotFoundNav","getPluginTabsNav","hasRole","prevPage","page","children","setActivePage","severity","AppNotificationSeverity","Error","active","find","tab","configPages","body","angularConfigCtrl","version","hasUpdate","content","latestVersion","theme","placement","item","PluginIncludeType","toLowerCase","replace","getPluginIcon","includes","map","include","key","renderSidebarIncludeBody","dependencies","grafanaVersion","plugins","plug","links","link","url","target","rel","isAdmin","navModel","Contents","loadError","renderBody","renderVersionInfo","renderSidebarIncludes","renderSidebarDependencies","renderSidebarLinks","pages","dashboard","img","logos","large","subTitle","author","breadcrumbs","pageId","defaultPageId","found","selected","changed","p","hot","module","connect","routeParams","copyObject","createAssigner","keysIn","assignIn","object","source","exports","DashboardsTable","dashboardId","importedUrl","style","textAlign","revision","importedRevision","buttonText"],"mappings":"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","file":"PluginPage.4e20f99bf66682942589.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport extend from 'lodash/extend';\n\nimport { PluginDashboard } from 'app/types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport DashboardsTable from 'app/features/datasources/DashboardsTable';\nimport { AppEvents, PluginMeta, DataSourceApi } from '@grafana/data';\n\ninterface Props {\n  plugin: PluginMeta;\n  datasource?: DataSourceApi;\n}\n\ninterface State {\n  dashboards: PluginDashboard[];\n  loading: boolean;\n}\n\nexport class PluginDashboards extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const pluginId = this.props.plugin.id;\n    getBackendSrv()\n      .get(`/api/plugins/${pluginId}/dashboards`)\n      .then((dashboards: any) => {\n        this.setState({ dashboards, loading: false });\n      });\n  }\n\n  importAll = () => {\n    this.importNext(0);\n  };\n\n  private importNext = (index: number) => {\n    const { dashboards } = this.state;\n    return this.import(dashboards[index], true).then(() => {\n      if (index + 1 < dashboards.length) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  };\n\n  import = (dash: PluginDashboard, overwrite: boolean) => {\n    const { plugin, datasource } = this.props;\n\n    const installCmd: any = {\n      pluginId: plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: datasource.meta.id,\n        value: datasource.name,\n      });\n    }\n\n    return getBackendSrv()\n      .post(`/api/dashboards/import`, installCmd)\n      .then((res: PluginDashboard) => {\n        appEvents.emit(AppEvents.alertSuccess, ['Dashboard Imported', dash.title]);\n        extend(dash, res);\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  remove = (dash: PluginDashboard) => {\n    getBackendSrv()\n      .delete('/api/dashboards/' + dash.importedUri)\n      .then(() => {\n        dash.imported = false;\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  render() {\n    const { loading, dashboards } = this.state;\n    if (loading) {\n      return <div>loading...</div>;\n    }\n    if (!dashboards || !dashboards.length) {\n      return <div>No dashboards are included with this plugin</div>;\n    }\n\n    return (\n      <div className=\"gf-form-group\">\n        <DashboardsTable dashboards={dashboards} onImport={this.import} onRemove={this.remove} />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport extend from 'lodash/extend';\n\nimport { Button } from '@grafana/ui';\nimport { PluginMeta, AppPlugin, deprecationWarning } from '@grafana/data';\nimport { AngularComponent, getAngularLoader, getBackendSrv } from '@grafana/runtime';\n\nimport { css } from 'emotion';\n\ninterface Props {\n  app: AppPlugin;\n}\n\ninterface State {\n  angularCtrl: AngularComponent | null;\n  refresh: number;\n}\n\nexport class AppConfigCtrlWrapper extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n\n  // Needed for angular scope\n  preUpdateHook = () => Promise.resolve();\n  postUpdateHook = () => Promise.resolve();\n  model: PluginMeta;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      angularCtrl: null,\n      refresh: 0,\n    };\n  }\n\n  componentDidMount() {\n    // Force a reload after the first mount -- is there a better way to do this?\n    setTimeout(() => {\n      this.setState({ refresh: this.state.refresh + 1 });\n    }, 5);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.element || this.state.angularCtrl) {\n      return;\n    }\n\n    // Set a copy of the meta\n    this.model = cloneDeep(this.props.app.meta);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"app-config-ctrl\"></plugin-component>';\n    const scopeProps = { ctrl: this };\n    const angularCtrl = loader.load(this.element, scopeProps, template);\n\n    this.setState({ angularCtrl });\n  }\n\n  render() {\n    const model = this.model;\n\n    const withRightMargin = css({ marginRight: '8px' });\n\n    return (\n      <div>\n        <div ref={element => (this.element = element)} />\n        <br />\n        <br />\n        {model && (\n          <div className=\"gf-form\">\n            {!model.enabled && (\n              <Button variant=\"primary\" onClick={this.enable} className={withRightMargin}>\n                Enable\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"primary\" onClick={this.update} className={withRightMargin}>\n                Update\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"destructive\" onClick={this.disable} className={withRightMargin}>\n                Disable\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  //-----------------------------------------------------------\n  // Copied from plugin_edit_ctrl\n  //-----------------------------------------------------------\n\n  update = () => {\n    const pluginId = this.model.id;\n\n    this.preUpdateHook()\n      .then(() => {\n        const updateCmd = extend(\n          {\n            enabled: this.model.enabled,\n            pinned: this.model.pinned,\n            jsonData: this.model.jsonData,\n            secureJsonData: this.model.secureJsonData,\n          },\n          {}\n        );\n        return getBackendSrv().post(`/api/plugins/${pluginId}/settings`, updateCmd);\n      })\n      .then(this.postUpdateHook)\n      .then(res => {\n        window.location.href = window.location.href;\n      });\n  };\n\n  setPreUpdateHook = (callback: () => any) => {\n    this.preUpdateHook = callback;\n  };\n\n  setPostUpdateHook = (callback: () => any) => {\n    this.postUpdateHook = callback;\n  };\n\n  // Stub to avoid unknown function in legacy code\n  importDashboards = (): Promise<void> => {\n    deprecationWarning('AppConfig', 'importDashboards()');\n    return Promise.resolve();\n  };\n\n  enable = () => {\n    this.model.enabled = true;\n    this.model.pinned = true;\n    this.update();\n  };\n\n  disable = () => {\n    this.model.enabled = false;\n    this.model.pinned = false;\n    this.update();\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { renderMarkdown } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\ninterface Props {\n  plugin: {\n    name: string;\n    id: string;\n  };\n  type: string;\n}\n\ninterface State {\n  isError: boolean;\n  isLoading: boolean;\n  help: string;\n}\n\nexport class PluginHelp extends PureComponent<Props, State> {\n  state = {\n    isError: false,\n    isLoading: false,\n    help: '',\n  };\n\n  componentDidMount(): void {\n    this.loadHelp();\n  }\n\n  constructPlaceholderInfo() {\n    return 'No plugin help or readme markdown file was found';\n  }\n\n  loadHelp = () => {\n    const { plugin, type } = this.props;\n    this.setState({ isLoading: true });\n\n    getBackendSrv()\n      .get(`/api/plugins/${plugin.id}/markdown/${type}`)\n      .then((response: string) => {\n        const helpHtml = renderMarkdown(response);\n\n        if (response === '' && type === 'help') {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: this.constructPlaceholderInfo(),\n          });\n        } else {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: helpHtml,\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          isError: true,\n          isLoading: false,\n        });\n      });\n  };\n\n  render() {\n    const { type } = this.props;\n    const { isError, isLoading, help } = this.state;\n\n    if (isLoading) {\n      return <h2>Loading help...</h2>;\n    }\n\n    if (isError) {\n      return <h3>'Error occurred when loading help'</h3>;\n    }\n\n    if (type === 'panel_help' && help === '') {\n    }\n\n    return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: help }} />;\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport find from 'lodash/find';\n// Types\nimport {\n  AppPlugin,\n  GrafanaPlugin,\n  NavModel,\n  NavModelItem,\n  PluginDependencies,\n  PluginInclude,\n  PluginIncludeType,\n  PluginMeta,\n  PluginMetaInfo,\n  PluginType,\n  UrlQueryMap,\n} from '@grafana/data';\nimport { AppNotificationSeverity, CoreEvents, StoreState } from 'app/types';\nimport { Alert, Tooltip } from '@grafana/ui';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin, importDataSourcePlugin, importPanelPlugin } from './plugin_loader';\nimport { getNotFoundNav } from 'app/core/nav_model_srv';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport { AppConfigCtrlWrapper } from './wrappers/AppConfigWrapper';\nimport { PluginDashboards } from './PluginDashboards';\nimport { appEvents } from 'app/core/core';\nimport { config } from 'app/core/config';\nimport { ContextSrv } from '../../core/services/context_srv';\n\nexport function getLoadingNav(): NavModel {\n  const node = {\n    text: 'Loading...',\n    icon: 'icon-gf icon-gf-panel',\n  };\n  return {\n    node: node,\n    main: node,\n  };\n}\n\nfunction loadPlugin(pluginId: string): Promise<GrafanaPlugin> {\n  return getPluginSettings(pluginId).then(info => {\n    if (info.type === PluginType.app) {\n      return importAppPlugin(info);\n    }\n    if (info.type === PluginType.datasource) {\n      return importDataSourcePlugin(info);\n    }\n    if (info.type === PluginType.panel) {\n      return importPanelPlugin(pluginId).then(plugin => {\n        // Panel Meta does not have the *full* settings meta\n        return getPluginSettings(pluginId).then(meta => {\n          plugin.meta = {\n            ...meta, // Set any fields that do not exist\n            ...plugin.meta,\n          };\n          return plugin;\n        });\n      });\n    }\n    if (info.type === PluginType.renderer) {\n      return Promise.resolve({ meta: info } as GrafanaPlugin);\n    }\n    return Promise.reject('Unknown Plugin type: ' + info.type);\n  });\n}\n\ninterface Props {\n  pluginId: string;\n  query: UrlQueryMap;\n  path: string; // the URL path\n  $contextSrv: ContextSrv;\n}\n\ninterface State {\n  loading: boolean;\n  plugin?: GrafanaPlugin;\n  nav: NavModel;\n  defaultPage: string; // The first configured one or readme\n}\n\nconst PAGE_ID_README = 'readme';\nconst PAGE_ID_DASHBOARDS = 'dashboards';\nconst PAGE_ID_CONFIG_CTRL = 'config';\n\nclass PluginPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nav: getLoadingNav(),\n      defaultPage: PAGE_ID_README,\n    };\n  }\n\n  async componentDidMount() {\n    const { pluginId, path, query, $contextSrv } = this.props;\n    const { appSubUrl } = config;\n\n    const plugin = await loadPlugin(pluginId);\n    if (!plugin) {\n      this.setState({\n        loading: false,\n        nav: getNotFoundNav(),\n      });\n      return; // 404\n    }\n\n    const { defaultPage, nav } = getPluginTabsNav(plugin, appSubUrl, path, query, $contextSrv.hasRole('Admin'));\n\n    this.setState({\n      loading: false,\n      plugin,\n      defaultPage,\n      nav,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevPage = prevProps.query.page as string;\n    const page = this.props.query.page as string;\n\n    if (prevPage !== page) {\n      const { nav, defaultPage } = this.state;\n      const node = {\n        ...nav.node,\n        children: setActivePage(page, nav.node.children!, defaultPage),\n      };\n\n      this.setState({\n        nav: {\n          node: node,\n          main: node,\n        },\n      });\n    }\n  }\n\n  renderBody() {\n    const { query } = this.props;\n    const { plugin, nav } = this.state;\n\n    if (!plugin) {\n      return <Alert severity={AppNotificationSeverity.Error} title=\"Plugin Not Found\" />;\n    }\n\n    const active = nav.main.children!.find(tab => tab.active);\n    if (active) {\n      // Find the current config tab\n      if (plugin.configPages) {\n        for (const tab of plugin.configPages) {\n          if (tab.id === active.id) {\n            return <tab.body plugin={plugin} query={query} />;\n          }\n        }\n      }\n\n      // Apps have some special behavior\n      if (plugin.meta.type === PluginType.app) {\n        if (active.id === PAGE_ID_DASHBOARDS) {\n          return <PluginDashboards plugin={plugin.meta} />;\n        }\n\n        if (active.id === PAGE_ID_CONFIG_CTRL && plugin.angularConfigCtrl) {\n          return <AppConfigCtrlWrapper app={plugin as AppPlugin} />;\n        }\n      }\n    }\n\n    return <PluginHelp plugin={plugin.meta} type=\"help\" />;\n  }\n\n  showUpdateInfo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      model: this.state.plugin!.meta,\n    });\n  };\n\n  renderVersionInfo(meta: PluginMeta) {\n    if (!meta.info.version) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Version</h4>\n        <span>{meta.info.version}</span>\n        {meta.hasUpdate && (\n          <div>\n            <Tooltip content={meta.latestVersion!} theme=\"info\" placement=\"top\">\n              <a href=\"#\" onClick={this.showUpdateInfo}>\n                Update Available!\n              </a>\n            </Tooltip>\n          </div>\n        )}\n      </section>\n    );\n  }\n\n  renderSidebarIncludeBody(item: PluginInclude) {\n    if (item.type === PluginIncludeType.page) {\n      const pluginId = this.state.plugin!.meta.id;\n      const page = item.name.toLowerCase().replace(' ', '-');\n      return (\n        <a href={`plugins/${pluginId}/page/${page}`}>\n          <i className={getPluginIcon(item.type)} />\n          {item.name}\n        </a>\n      );\n    }\n    return (\n      <>\n        <i className={getPluginIcon(item.type)} />\n        {item.name}\n      </>\n    );\n  }\n\n  renderSidebarIncludes(includes?: PluginInclude[]) {\n    if (!includes || !includes.length) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Includes</h4>\n        <ul className=\"ui-list plugin-info-list\">\n          {includes.map(include => {\n            return (\n              <li className=\"plugin-info-list-item\" key={include.name}>\n                {this.renderSidebarIncludeBody(include)}\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n\n  renderSidebarDependencies(dependencies?: PluginDependencies) {\n    if (!dependencies) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Dependencies</h4>\n        <ul className=\"ui-list plugin-info-list\">\n          <li className=\"plugin-info-list-item\">\n            <img src=\"public/img/grafana_icon.svg\" />\n            Grafana {dependencies.grafanaVersion}\n          </li>\n          {dependencies.plugins &&\n            dependencies.plugins.map(plug => {\n              return (\n                <li className=\"plugin-info-list-item\" key={plug.name}>\n                  <i className={getPluginIcon(plug.type)} />\n                  {plug.name} {plug.version}\n                </li>\n              );\n            })}\n        </ul>\n      </section>\n    );\n  }\n\n  renderSidebarLinks(info: PluginMetaInfo) {\n    if (!info.links || !info.links.length) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Links</h4>\n        <ul className=\"ui-list\">\n          {info.links.map(link => {\n            return (\n              <li key={link.url}>\n                <a href={link.url} className=\"external-link\" target=\"_blank\" rel=\"noopener\">\n                  {link.name}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n\n  render() {\n    const { loading, nav, plugin } = this.state;\n    const { $contextSrv } = this.props;\n    const isAdmin = $contextSrv.hasRole('Admin');\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={loading}>\n          {plugin && (\n            <div className=\"sidebar-container\">\n              <div className=\"sidebar-content\">\n                {plugin.loadError && (\n                  <Alert\n                    severity={AppNotificationSeverity.Error}\n                    title=\"Error Loading Plugin\"\n                    children={\n                      <>\n                        Check the server startup logs for more information. <br />\n                        If this plugin was loaded from git, make sure it was compiled.\n                      </>\n                    }\n                  />\n                )}\n                {this.renderBody()}\n              </div>\n              <aside className=\"page-sidebar\">\n                <section className=\"page-sidebar-section\">\n                  {this.renderVersionInfo(plugin.meta)}\n                  {isAdmin && this.renderSidebarIncludes(plugin.meta.includes)}\n                  {this.renderSidebarDependencies(plugin.meta.dependencies)}\n                  {this.renderSidebarLinks(plugin.meta.info)}\n                </section>\n              </aside>\n            </div>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction getPluginTabsNav(\n  plugin: GrafanaPlugin,\n  appSubUrl: string,\n  path: string,\n  query: UrlQueryMap,\n  isAdmin: boolean\n): { defaultPage: string; nav: NavModel } {\n  const { meta } = plugin;\n  let defaultPage: string | undefined;\n  const pages: NavModelItem[] = [];\n\n  if (true) {\n    pages.push({\n      text: 'Readme',\n      icon: 'fa fa-fw fa-file-text-o',\n      url: `${appSubUrl}${path}?page=${PAGE_ID_README}`,\n      id: PAGE_ID_README,\n    });\n  }\n\n  // We allow non admins to see plugins but only their readme. Config is hidden even though the API needs to be\n  // public for plugins to work properly.\n  if (isAdmin) {\n    // Only show Config/Pages for app\n    if (meta.type === PluginType.app) {\n      // Legacy App Config\n      if (plugin.angularConfigCtrl) {\n        pages.push({\n          text: 'Config',\n          icon: 'gicon gicon-cog',\n          url: `${appSubUrl}${path}?page=${PAGE_ID_CONFIG_CTRL}`,\n          id: PAGE_ID_CONFIG_CTRL,\n        });\n        defaultPage = PAGE_ID_CONFIG_CTRL;\n      }\n\n      if (plugin.configPages) {\n        for (const page of plugin.configPages) {\n          pages.push({\n            text: page.title,\n            icon: page.icon,\n            url: `${appSubUrl}${path}?page=${page.id}`,\n            id: page.id,\n          });\n\n          if (!defaultPage) {\n            defaultPage = page.id;\n          }\n        }\n      }\n\n      // Check for the dashboard pages\n      if (find(meta.includes, { type: PluginIncludeType.dashboard })) {\n        pages.push({\n          text: 'Dashboards',\n          icon: 'gicon gicon-dashboard',\n          url: `${appSubUrl}${path}?page=${PAGE_ID_DASHBOARDS}`,\n          id: PAGE_ID_DASHBOARDS,\n        });\n      }\n    }\n  }\n\n  if (!defaultPage) {\n    defaultPage = pages[0].id; // the first tab\n  }\n\n  const node = {\n    text: meta.name,\n    img: meta.info.logos.large,\n    subTitle: meta.info.author.name,\n    breadcrumbs: [{ title: 'Plugins', url: 'plugins' }],\n    url: `${appSubUrl}${path}`,\n    children: setActivePage(query.page as string, pages, defaultPage!),\n  };\n\n  return {\n    defaultPage: defaultPage!,\n    nav: {\n      node: node,\n      main: node,\n    },\n  };\n}\n\nfunction setActivePage(pageId: string, pages: NavModelItem[], defaultPageId: string): NavModelItem[] {\n  let found = false;\n  const selected = pageId || defaultPageId;\n  const changed = pages.map(p => {\n    const active = !found && selected === p.id;\n    if (active) {\n      found = true;\n    }\n    return { ...p, active };\n  });\n\n  if (!found) {\n    changed[0].active = true;\n  }\n\n  return changed;\n}\n\nfunction getPluginIcon(type: string) {\n  switch (type) {\n    case 'datasource':\n      return 'gicon gicon-datasources';\n    case 'panel':\n      return 'icon-gf icon-gf-panel';\n    case 'app':\n      return 'icon-gf icon-gf-apps';\n    case 'page':\n      return 'icon-gf icon-gf-endpoint-tiny';\n    case 'dashboard':\n      return 'gicon gicon-dashboard';\n    default:\n      return 'icon-gf icon-gf-apps';\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  pluginId: state.location.routeParams.pluginId,\n  query: state.location.query,\n  path: state.location.path,\n});\n\nexport default hot(module)(connect(mapStateToProps)(PluginPage));\n","var copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    keysIn = require('./keysIn');\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nmodule.exports = assignIn;\n","import React, { FC } from 'react';\nimport { PluginDashboard } from '../../types';\nimport { Icon } from '@grafana/ui';\n\nexport interface Props {\n  dashboards: PluginDashboard[];\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <Icon name=\"apps\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </button>\n                ) : (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </button>\n                )}\n                {dashboard.imported && (\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\n                    <Icon name=\"trash-alt\" />\n                  </button>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DashboardsTable;\n","module.exports = require('./assignIn');\n"],"sourceRoot":""}