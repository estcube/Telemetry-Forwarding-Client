{"version":3,"sources":["webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts"],"names":["ResponseParser","res","data","results","key","queryRes","series","push","target","name","datapoints","points","refId","meta","tables","table","type","length","rowCount","columns","rows","textColIndex","this","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","value","j","indexOf","_","map","colName","options","annotation","timeColumnIndex","timeEndColumnIndex","textColumnIndex","tagsColumnIndex","Promise","reject","message","list","row","timeEnd","Math","floor","undefined","time","title","tags","trim","split","PostgresQuery","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","params","select","rawQuery","interpolateQueryStr","bind","substring","replace","String","find","g","variable","defaultFormatFn","multi","includeAll","quoteLiteral","join","escapeLiteral","interpolate","rawSql","buildQuery","timeColumnType","query","args","alias","timeGroup","hasTimeGroup","macro","hasUnixEpochTimecolumn","hasMetricColumn","column","buildValueColumn","aggregate","windows","func","overParts","buildTimeColumn","curr","prev","over","quoteIdentifier","conditions","tag","index","groupSection","part","buildMetricColumn","buildValueColumns","buildWhereClause","buildGroupClause","PostgresDatasource","instanceSettings","timeSrv","interpolateVariable","queryModel","v","id","jsonData","responseParser","interval","timeInterval","queries","expandedQueries","datasource","filter","targets","hide","intervalMs","maxDataPoints","datasourceId","render","of","getBackendSrv","fetch","url","method","from","range","valueOf","toString","to","pipe","processQueryResult","transformAnnotationResponse","toPromise","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","parseMetricFindQueryResult","metricFindQuery","then","status","catch","err","console","error","variableExists","PostgresMetaQuery","datatype","unquoteIdentifier","buildSchemaConstraint","includes","parts","quoteIdentAsLiteral","buildTableConstraint","register","SqlPartDef","style","dynamicLookup","defaultParams","label","quote","create","def","SqlPart","PostgresQueryCtrl","$scope","$injector","uiSegmentSrv","panel","metaBuilder","updateProjection","formats","panelCtrl","findMetricTable","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","groupAdd","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","getLocationSrv","update","inspect","inspectTab","partial","refresh","selectParts","sqlPart","n","whereParts","groupParts","selectMenu","aggregates","submenu","timescaledb","postgresVersion","appEvents","emit","CoreEvents","showConfirmModal","text2","icon","yesText","onConfirm","button","plusButton","buildTableQuery","transformToSegments","handleQueryError","task1","buildColumnQuery","r","timeColumnChanged","task2","all","buildDatatypeQuery","partModel","splice","updatePersistedParts","addNone","dataList","lastQueryError","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findIndex","p","item","subItem","partType","addAlias","clone","addGroup","aggIndex","findAggregateIndex","windowIndex","findWindowIndex","modelsIndex","partIndex","evt","buildAggregateQuery","removeSelectPart","resolve","removeGroup","some","s","param","buildValueQuery","newOperators","getOperators","d","resetPlusButton","QueryCtrl","templateUrl","PostgresConfigCtrl","datasourceSrv","postgresVersions","current","sslmode","showTimescaleDBHelp","autoDetectFeatures","onPasswordReset","createResetHandler","PasswordFieldEnum","Password","onPasswordChange","createChangeHandler","loadDatasource","ds","getVersion","version","Number","getTimescaleDBVersion","major","trunc","minor","PostgresAnnotationsQueryCtrl","ctrl","field","event","preventDefault","secureJsonFields","secureJsonData","currentTarget","toUpperCase","wrapOpen","wrapClose","separator","strValue","optional"],"mappings":"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","file":"postgresPlugin.4e20f99bf66682942589.js","sourcesContent":["import _ from 'lodash';\n\nexport default class ResponseParser {\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any[][]) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any, key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let timeEndColumnIndex = -1;\n    const titleColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'timeend') {\n        timeEndColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return Promise.reject({\n        message: 'Missing mandatory time column in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      const timeEnd =\n        timeEndColumnIndex !== -1 && row[timeEndColumnIndex] ? Math.floor(row[timeEndColumnIndex]) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        timeEnd,\n        title: row[titleColumnIndex],\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class PostgresQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: any) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: any) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: any, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: any) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = _.find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows: any = _.find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'delta':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = curr + ' - ' + prev;\n              break;\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias: any = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { DataQueryResponse, ScopedVars } from '@grafana/data';\n\nimport ResponseParser from './response_parser';\nimport PostgresQuery from 'app/plugins/datasource/postgres/postgres_query';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { PostgresMetricFindValue, PostgresQueryForInterpolation } from './types';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\n\nexport class PostgresDatasource {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQuery;\n  interval: string;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: { name: any; id?: any; jsonData?: any },\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new PostgresQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[], variable: { multi: any; includeAll: any }) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, v => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: PostgresQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): PostgresQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  query(options: any): Observable<DataQueryResponse> {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new PostgresQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return of({ data: [] });\n    }\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .pipe(map(this.responseParser.processQueryResult));\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .pipe(map((data: any) => this.responseParser.transformAnnotationResponse(options, data)))\n      .toPromise();\n  }\n\n  metricFindQuery(\n    query: string,\n    optionalOptions: { variable?: any; searchFilter?: string }\n  ): Promise<PostgresMetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .pipe(map((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data)))\n      .toPromise();\n  }\n\n  getVersion() {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion() {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource() {\n    return this.metricFindQuery('SELECT 1', {})\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.error(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new PostgresQuery(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import QueryModel from './postgres_query';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['delta', 'increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQuery from './postgres_query';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { CoreEvents } from 'app/types';\nimport { PanelEvents } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { getLocationSrv } from '@grafana/runtime';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  queryModel: PostgresQuery;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryError: string | null;\n  showHelp: boolean;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  showQueryInspector() {\n    getLocationSrv().update({\n      query: { inspect: this.panel.id, inspectTab: 'query' },\n      partial: true,\n    });\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Delta', value: 'delta' },\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit(CoreEvents.showConfirmModal, {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'exclamation-triangle',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any; type: any; fake: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n    button.type = plusButton.type;\n    button.fake = plusButton.fake;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = null;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: { addNone?: any; addTemplateVars?: any; templateQuoter?: any }) {\n    return (results: any) => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: any) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import _ from 'lodash';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then((ds: any) => {\n      return ds.getVersion().then((version: any) => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then((version: any) => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!_.find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n    { name: '11', value: 1100 },\n    { name: '12', value: 1200 },\n  ];\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  PostgresDatasource,\n  PostgresDatasource as Datasource,\n  PostgresQueryCtrl as QueryCtrl,\n  PostgresConfigCtrl as ConfigCtrl,\n  PostgresAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular datasource plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n"],"sourceRoot":""}