{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/types.ts","webpack:///./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack:///./public/app/plugins/datasource/cloudwatch/language_provider.ts","webpack:///./public/app/plugins/datasource/cloudwatch/utils/rxjs/increasingInterval.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/annotations_query_ctrl.ts","webpack:///./node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack:///./node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack:///./node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack:///./node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack:///./node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack:///./node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack:///./node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack:///./node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack:///./node_modules/common-tags/es/stripIndent/stripIndent.js","webpack:///./node_modules/common-tags/es/commaLists/commaLists.js","webpack:///./node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack:///./node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack:///./node_modules/common-tags/es/html/html.js","webpack:///./node_modules/common-tags/es/safeHtml/safeHtml.js","webpack:///./node_modules/common-tags/es/oneLine/oneLine.js","webpack:///./node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack:///./node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack:///./node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack:///./node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack:///./node_modules/common-tags/es/inlineLists/inlineLists.js","webpack:///./node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack:///./node_modules/common-tags/es/stripIndents/stripIndents.js","webpack:///./public/app/plugins/datasource/cloudwatch/components/LogsCheatSheet.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/module.tsx","webpack:///./public/app/core/utils/CancelablePromise.ts"],"names":["CloudWatchQueryParameterCtrl","$scope","templateSrv","uiSegmentSrv","datasourceSrv","init","target","namespace","metricName","statistics","dimensions","period","region","id","expression","regionSegment","getSegmentForValue","namespaceSegment","metricSegment","dimSegments","_","reduce","memo","value","key","push","newKey","newOperator","newKeyValue","statSegments","map","stat","ensurePlusButton","removeDimSegment","newSegment","fake","removeStatSegment","isEmpty","onChange","getStatSegments","Promise","resolve","flatten","angular","copy","datasource","standardStatistics","s","statSegmentChanged","segment","index","splice","type","seg","segments","count","length","lastSegment","Math","max","newPlusButton","getDimSegments","$index","query","getDimensionKeys","dimensionKey","getDimensionValues","then","transformToSegments","results","dimSegmentChanged","newFake","cssClass","syncDimSegmentsWithModel","dims","i","keySegment","valueSegment","getRegions","metricFindQuery","unshift","text","getNamespaces","getMetrics","regionChanged","namespaceChanged","metricChanged","addTemplateVars","expandable","each","getVariables","variable","name","coreModule","directive","templateUrl","controller","restrict","scope","CloudWatchLogsQueryStatus","Select","LegacyForms","Input","authProviderOptions","label","ConfigEditor","props","loadRegionsPromise","state","regions","this","makePromiseCancelable","loadRegions","promise","catch","isCanceled","console","warn","cancel","getDatasourceSrv","loadDatasource","options","ds","setState","err","secureJsonData","className","find","authProvider","jsonData","authType","defaultValue","option","assumeRoleArn","externalId","onUpdateDatasourceJsonDataOptionSelect","tooltip","placeholder","database","onUpdateDatasourceOption","secureJsonFields","accessKey","disabled","variant","onClick","onUpdateDatasourceResetOption","onUpdateDatasourceSecureJsonDataOption","secretKey","onUpdateDatasourceJsonDataOption","defaultRegion","customMetricsNamespaces","PureComponent","ThrottlingErrorMessage","href","func","wait","mem","memoize","debounce","leading","args","JSON","stringify","CloudWatchLanguageProvider","initialValues","cleanText","replace","trim","request","url","params","awsRequest","start","startTask","started","fetchFields","logGroups","fetchedFieldsCache","Date","now","time","sortedUniq","join","fields","all","logGroup","getLogGroupFields","logGroupName","Set","acc","cur","concat","logGroupFields","f","values","handleKeyword","context","getFieldCompletionItems","logGroupNames","suggs","functionSuggestions","prefixMatch","items","STRING_FUNCTIONS","DATETIME_FUNCTIONS","IP_FUNCTIONS","suggestions","handleCommand","commandToken","curToken","queryCommand","content","toLowerCase","prevToken","prevNonWhitespaceToken","currentTokenIsFirstArg","handleSortCommand","currentTokenIsAfterCommandAndEmpty","isTokenType","next","currentTokenIsAfterCommand","nextNonWhitespaceToken","currentTokenIsComma","currentTokenIsCommaOrAfterComma","includes","typeaheadOutput","getFieldAndFilterFunctionCompletionItems","getStatsAggCompletionItems","forEach","group","skipFilter","sugg","boolFuncs","getBoolFuncCompletionItems","handleComparison","fieldsSuggestions","comparisonSuggestions","getComparisonCompletionItems","getCommandCompletionItems","QUERY_COMMANDS","FIELD_AND_FILTER_FUNCTIONS","AGGREGATION_FUNCTIONS_STATS","BOOLEAN_FUNCTIONS","NUMERIC_OPERATORS","field","insertText","match","undefined","Object","assign","syntax","grammar","getSyntax","Prism","tokenize","token","toString","input","tokens","data","get","filter","offsets","selection","offset","end","isFirstToken","prev","types","isInsideFunctionParenthesis","isAfterKeyword","previousCommandToken","isFirstArgument","LanguageProvider","startToken","thisToken","funcsWithFieldArgs","funcName","parenthesisToken","maybeFunctionToken","keyword","maybeKeyword","getPreviousTokenExcluding","exclude","main","item","dispatch","subscriber","counter","step","endPeriod","newPeriod","min","schedule","displayAlert","datasourceName","store","notifyApp","createErrorNotification","React","createElement","displayCustomError","title","message","CloudWatchDatasource","instanceSettings","timeSrv","handleLogQueries","logQueries","validLogQueries","of","error","LoadingState","Done","queryParams","queryString","refId","getActualRegion","scopedVars","makeLogActionRequest","pipe","mergeMap","dataFrames","logsQuery","dataFrame","queryId","meta","custom","statsGroups","response","addDataLinksToLogsResponse","handleMetricQueries","metricQueries","validMetricsQueries","convertDimensionFormat","String","getPeriod","some","indexOf","matches","exec","intervalMs","maxDataPoints","datasourceId","from","range","valueOf","to","queries","performTimeSeriesQuery","getLogRowContext","row","limit","direction","logStreamField","logField","requestParams","startFromHead","parseLogGroupName","rowIndex","logStreamName","endTime","timeEpochMs","startTime","toPromise","getTargetsByQueryMode","targets","metricsQueries","queryMode","proxyUrl","debouncedAlert","memoizedDebounce","AppNotificationTimeout","Error","debouncedCustomAlert","languageProvider","hide","dataQueryResponses","merge","param","statsQuery","observable","onUnsubscribe","startPeriod","scheduler","asyncScheduler","Observable","add","increasingInterval","concatMap","repeat","share","consecutiveFailedAttempts","scan","frames","failures","prevRecordsMatched","frame","recordsMatched","stats","displayName","queryResponse","zip","tap","Complete","Cancelled","Failed","hasOwnProperty","failedAttempts","set","every","Loading","DataQueryErrorType","Timeout","takeWhile","stopQueries","innerSub","subscribe","val","complete","unsubscribe","timeRange","toISOString","curTarget","interpolatedGroups","urlProps","timeType","tz","editorString","isLiveTail","source","encodedUrl","encodeUrl","config","links","targetBlank","keys","logQuery","finalize","toArray","fieldNames","fieldPercentages","getLogGroupFieldsResponse","percent","test","parseInt","rangeUtil","intervalToSeconds","gmdMeta","conf","view","stacked","isSearchExpression","Expression","metrics","entries","Period","encodeURIComponent","res","queryRequest","queryResult","link","buildCloudwatchConsoleUrl","series","points","toDataFrame","datapoints","failedRedIds","regionsAffected","suggestData","tables","rows","subtype","parameters","r","transformSuggestDataFromTable","makeReplacements","resultsToDataFrames","toDataQueryResponse","catchError","doMetricQueryRequest","filterDimensions","instanceId","attributeName","filters","resourceType","tags","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","filterJson","parse","ebsVolumeIdsQuery","getEbsVolumeIds","ec2InstanceAttributeQuery","targetAttributeName","getEc2InstanceAttribute","resourceARNsQuery","tagsJSON","getResourceARNs","annotation","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","v","variableExists","k","status","method","getBackendSrv","datasourceRequest","result","getDefaultRegion","date","roundUp","isString","dateMath","round","Array","isArray","valueVar","getVariableName","multi","split","displayErrorIfIsMultiTemplateVariable","fieldName","interpolateMetricsQueryVariables","alias","DataSourceApi","logIdentifier","colonIndex","lastIndexOf","substr","CloudWatchAnnotationsQueryCtrl","defaultsDeep","matchExact","bind","strings","raw","defineProperties","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","prototype","_templateObject","freeze","instance","TypeError","TemplateTag","_this","_len","arguments","transformers","_key","tag","_len2","expressions","_key2","interimTag","transformEndResult","transformString","processSubstitutions","transformer","previousTag","template","_len3","substitutions","_key3","apply","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","transform","onString","onSubstitution","endResult","onEndResult","side","arr","arr2","indent","el","regexp","RegExp","replaceWhat","replaceWith","defaults","separator","conjunction","serial","opts","arrayLength","separatorIndex","slice","splitBy","isValidValue","x","Number","isNaN","CLIQ_EXAMPLES","category","examples","expr","stripIndents","stripIndent","exampleCategory","css","LogsCheatSheet","onClickExample","keyPrefix","e","code","languages","tokenizer","spans","flattenTokens","aliases","renderHighlightedMarkup","cat","cx","renderExpression","j","plugin","DataSourcePlugin","setExploreStartPage","setConfigEditor","setQueryEditor","PanelQueryEditor","setExploreMetricsQueryField","setExploreLogsQueryField","CloudWatchLogsQueryEditor","setAnnotationQueryCtrl","hasCanceled_","reject"],"mappings":"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","file":"cloudwatchPlugin.4e20f99bf66682942589.js","sourcesContent":["import angular from 'angular';\nimport coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class CloudWatchQueryParameterCtrl {\n  /** @ngInject */\n  constructor($scope: any, templateSrv: TemplateSrv, uiSegmentSrv: any, datasourceSrv: DatasourceSrv) {\n    $scope.init = () => {\n      const target = $scope.target;\n      target.namespace = target.namespace || '';\n      target.metricName = target.metricName || '';\n      target.statistics = target.statistics || ['Average'];\n      target.dimensions = target.dimensions || {};\n      target.period = target.period || '';\n      target.region = target.region || 'default';\n      target.id = target.id || '';\n      target.expression = target.expression || '';\n\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\n\n      $scope.dimSegments = _.reduce(\n        $scope.target.dimensions,\n        (memo, value, key) => {\n          memo.push(uiSegmentSrv.newKey(key));\n          memo.push(uiSegmentSrv.newOperator('='));\n          memo.push(uiSegmentSrv.newKeyValue(value));\n          return memo;\n        },\n        [] as any\n      );\n\n      $scope.statSegments = _.map($scope.target.statistics, stat => {\n        return uiSegmentSrv.getSegmentForValue(stat);\n      });\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove dimension --',\n      });\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove stat --',\n      });\n\n      if (_.isEmpty($scope.target.region)) {\n        $scope.target.region = 'default';\n      }\n\n      if (!$scope.onChange) {\n        $scope.onChange = () => {};\n      }\n    };\n\n    $scope.getStatSegments = () => {\n      return Promise.resolve(\n        _.flatten([\n          angular.copy($scope.removeStatSegment),\n          _.map($scope.datasource.standardStatistics, s => {\n            return uiSegmentSrv.getSegmentForValue(s);\n          }),\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\n        ])\n      );\n    };\n\n    $scope.statSegmentChanged = (segment: any, index: number) => {\n      if (segment.value === $scope.removeStatSegment.value) {\n        $scope.statSegments.splice(index, 1);\n      } else {\n        segment.type = 'value';\n      }\n\n      $scope.target.statistics = _.reduce(\n        $scope.statSegments,\n        (memo, seg) => {\n          if (!seg.fake) {\n            memo.push(seg.value);\n          }\n          return memo;\n        },\n        [] as any\n      );\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.onChange();\n    };\n\n    $scope.ensurePlusButton = (segments: any) => {\n      const count = segments.length;\n      const lastSegment = segments[Math.max(count - 1, 0)];\n\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\n        segments.push(uiSegmentSrv.newPlusButton());\n      }\n    };\n\n    $scope.getDimSegments = (segment: any, $index: number) => {\n      if (segment.type === 'operator') {\n        return Promise.resolve([]);\n      }\n\n      const target = $scope.target;\n      let query = Promise.resolve([] as any[]);\n\n      if (segment.type === 'key' || segment.type === 'plus-button') {\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\n      } else if (segment.type === 'value') {\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\n        delete target.dimensions[dimensionKey];\n        query = $scope.datasource.getDimensionValues(\n          target.region,\n          target.namespace,\n          target.metricName,\n          dimensionKey,\n          target.dimensions\n        );\n      }\n\n      return query.then($scope.transformToSegments(true)).then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\n        }\n        return results;\n      });\n    };\n\n    $scope.dimSegmentChanged = (segment: any, index: number) => {\n      $scope.dimSegments[index] = segment;\n\n      if (segment.value === $scope.removeDimSegment.value) {\n        $scope.dimSegments.splice(index, 3);\n      } else if (segment.type === 'plus-button') {\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      $scope.syncDimSegmentsWithModel();\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.onChange();\n    };\n\n    $scope.syncDimSegmentsWithModel = () => {\n      const dims: any = {};\n      const length = $scope.dimSegments.length;\n\n      for (let i = 0; i < length - 2; i += 3) {\n        const keySegment = $scope.dimSegments[i];\n        const valueSegment = $scope.dimSegments[i + 2];\n        if (!valueSegment.fake) {\n          dims[keySegment.value] = valueSegment.value;\n        }\n      }\n\n      $scope.target.dimensions = dims;\n    };\n\n    $scope.getRegions = () => {\n      return $scope.datasource\n        .metricFindQuery('regions()')\n        .then((results: any) => {\n          results.unshift({ text: 'default' });\n          return results;\n        })\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.getNamespaces = () => {\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\n    };\n\n    $scope.getMetrics = () => {\n      return $scope.datasource\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.regionChanged = () => {\n      $scope.target.region = $scope.regionSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.namespaceChanged = () => {\n      $scope.target.namespace = $scope.namespaceSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.metricChanged = () => {\n      $scope.target.metricName = $scope.metricSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.transformToSegments = (addTemplateVars: any) => {\n      return (results: any) => {\n        const segments = _.map(results, segment => {\n          return uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (addTemplateVars) {\n          _.each(templateSrv.getVariables(), variable => {\n            segments.unshift(\n              uiSegmentSrv.newSegment({\n                type: 'template',\n                value: '$' + variable.name,\n                expandable: true,\n              })\n            );\n          });\n        }\n\n        return segments;\n      };\n    };\n\n    $scope.init();\n  }\n}\n\nexport function cloudWatchQueryParameter() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\n    controller: CloudWatchQueryParameterCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      datasource: '=',\n      onChange: '&',\n    },\n  };\n}\n\ncoreModule.directive('cloudwatchQueryParameter', cloudWatchQueryParameter);\n","import { DataQuery, SelectableValue, DataSourceJsonData } from '@grafana/data';\n\nexport interface CloudWatchMetricsQuery extends DataQuery {\n  queryMode?: 'Metrics';\n\n  id: string;\n  region: string;\n  namespace: string;\n  expression: string;\n\n  metricName: string;\n  dimensions: { [key: string]: string | string[] };\n  statistics: string[];\n  period: string;\n  alias: string;\n  matchExact: boolean;\n}\n\nexport type LogAction =\n  | 'DescribeLogGroups'\n  | 'GetQueryResults'\n  | 'GetLogGroupFields'\n  | 'GetLogEvents'\n  | 'StartQuery'\n  | 'StopQuery';\n\nexport enum CloudWatchLogsQueryStatus {\n  Scheduled = 'Scheduled',\n  Running = 'Running',\n  Complete = 'Complete',\n  Failed = 'Failed',\n  Cancelled = 'Cancelled',\n}\n\nexport interface CloudWatchLogsQuery extends DataQuery {\n  queryMode: 'Logs';\n\n  id: string;\n  region: string;\n  expression?: string;\n  logGroupNames?: string[];\n  statsGroups?: string[];\n}\n\nexport type CloudWatchQuery = CloudWatchMetricsQuery | CloudWatchLogsQuery;\n\nexport const isCloudWatchLogsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchLogsQuery =>\n  (cloudwatchQuery as CloudWatchLogsQuery).queryMode === 'Logs';\n\nexport interface AnnotationQuery extends CloudWatchMetricsQuery {\n  prefixMatching: boolean;\n  actionPrefix: string;\n  alarmNamePrefix: string;\n}\n\nexport type SelectableStrings = Array<SelectableValue<string>>;\n\nexport interface CloudWatchJsonData extends DataSourceJsonData {\n  timeField?: string;\n  assumeRoleArn?: string;\n  externalId?: string;\n  database?: string;\n  customMetricsNamespaces?: string;\n}\n\nexport interface CloudWatchSecureJsonData {\n  accessKey: string;\n  secretKey: string;\n}\n\nexport interface GetQueryResultsRequest {\n  /**\n   * The ID number of the query.\n   */\n  queryId: string;\n}\n\nexport interface ResultField {\n  /**\n   * The log event field.\n   */\n  field?: string;\n  /**\n   * The value of this field.\n   */\n  value?: string;\n}\n\nexport interface QueryStatistics {\n  /**\n   * The number of log events that matched the query string.\n   */\n  recordsMatched?: number;\n  /**\n   * The total number of log events scanned during the query.\n   */\n  recordsScanned?: number;\n  /**\n   * The total number of bytes in the log events scanned during the query.\n   */\n  bytesScanned?: number;\n}\n\nexport type QueryStatus = 'Scheduled' | 'Running' | 'Complete' | 'Failed' | 'Cancelled' | string;\n\nexport interface GetLogEventsRequest {\n  /**\n   * The name of the log group.\n   */\n  logGroupName: string;\n  /**\n   * The name of the log stream.\n   */\n  logStreamName: string;\n  /**\n   * The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.\n   */\n  startTime?: number;\n  /**\n   * The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.\n   */\n  endTime?: number;\n  /**\n   * The token for the next set of items to return. (You received this token from a previous call.) Using this token works only when you specify true for startFromHead.\n   */\n  nextToken?: string;\n  /**\n   * The maximum number of log events returned. If you don't specify a value, the maximum is as many log events as can fit in a response size of 1 MB, up to 10,000 log events.\n   */\n  limit?: number;\n  /**\n   * If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false. If you are using nextToken in this operation, you must specify true for startFromHead.\n   */\n  startFromHead?: boolean;\n}\n\nexport interface GetQueryResultsResponse {\n  /**\n   * The log events that matched the query criteria during the most recent time it ran. The results value is an array of arrays. Each log event is one object in the top-level array. Each of these log event objects is an array of field/value pairs.\n   */\n  results?: ResultField[][];\n  /**\n   * Includes the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.\n   */\n  statistics?: QueryStatistics;\n  /**\n   * The status of the most recent running of the query. Possible values are Cancelled, Complete, Failed, Running, Scheduled, Timeout, and Unknown. Queries time out after 15 minutes of execution. To avoid having your queries time out, reduce the time range being searched, or partition your query into a number of queries.\n   */\n  status?: QueryStatus;\n}\n\nexport interface DescribeLogGroupsRequest {\n  /**\n   * The prefix to match.\n   */\n  logGroupNamePrefix?: string;\n  /**\n   * The token for the next set of items to return. (You received this token from a previous call.)\n   */\n  nextToken?: string;\n  /**\n   * The maximum number of items returned. If you don't specify a value, the default is up to 50 items.\n   */\n  limit?: number;\n  refId?: string;\n  region?: string;\n}\n\nexport interface TSDBResponse<T = any> {\n  results: Record<string, TSDBQueryResult<T>>;\n  message?: string;\n}\n\nexport interface TSDBQueryResult<T = any> {\n  refId: string;\n  series: TSDBTimeSeries[];\n  tables: Array<TSDBTable<T>>;\n  dataframes: number[][];\n\n  error?: string;\n  meta?: any;\n}\n\nexport interface TSDBTable<T = any> {\n  columns: Array<{ text: string }>;\n  rows: T[];\n}\n\nexport interface TSDBTimeSeries {\n  name: string;\n  points: TSDBTimePoint[];\n  tags?: Record<string, string>;\n}\nexport type TSDBTimePoint = [number, number];\n\nexport interface LogGroup {\n  /**\n   * The name of the log group.\n   */\n  logGroupName?: string;\n  /**\n   * The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.\n   */\n  creationTime?: number;\n  retentionInDays?: number;\n  /**\n   * The number of metric filters.\n   */\n  metricFilterCount?: number;\n  /**\n   * The Amazon Resource Name (ARN) of the log group.\n   */\n  arn?: string;\n  /**\n   * The number of bytes stored.\n   */\n  storedBytes?: number;\n  /**\n   * The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.\n   */\n  kmsKeyId?: string;\n}\n\nexport interface DescribeLogGroupsResponse {\n  /**\n   * The log groups.\n   */\n  logGroups?: LogGroup[];\n  nextToken?: string;\n}\n\nexport interface GetLogGroupFieldsRequest {\n  /**\n   * The name of the log group to search.\n   */\n  logGroupName: string;\n  /**\n   * The time to set as the center of the query. If you specify time, the 8 minutes before and 8 minutes after this time are searched. If you omit time, the past 15 minutes are queried. The time value is specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.\n   */\n  time?: number;\n}\n\nexport interface LogGroupField {\n  /**\n   * The name of a log field.\n   */\n  name?: string;\n  /**\n   * The percentage of log events queried that contained the field.\n   */\n  percent?: number;\n}\n\nexport interface GetLogGroupFieldsResponse {\n  /**\n   * The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.\n   */\n  logGroupFields?: LogGroupField[];\n}\n\nexport interface StartQueryRequest {\n  /**\n   * The log group on which to perform the query. A StartQuery operation must include a logGroupNames or a logGroupName parameter, but not both.\n   */\n  logGroupName?: string;\n  /**\n   * The list of log groups to be queried. You can include up to 20 log groups. A StartQuery operation must include a logGroupNames or a logGroupName parameter, but not both.\n   */\n  logGroupNames?: string[];\n  /**\n   * The beginning of the time range to query. The range is inclusive, so the specified start time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.\n   */\n  startTime: number;\n  /**\n   * The end of the time range to query. The range is inclusive, so the specified end time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.\n   */\n  endTime: number;\n  /**\n   * The query string to use. For more information, see CloudWatch Logs Insights Query Syntax.\n   */\n  queryString: string;\n  /**\n   * The maximum number of log events to return in the query. If the query string uses the fields command, only the specified fields and their values are returned. The default is 1000.\n   */\n  limit?: number;\n}\nexport interface StartQueryResponse {\n  /**\n   * The unique ID of the query.\n   */\n  queryId?: string;\n}\n\nexport interface MetricRequest {\n  from: string;\n  to: string;\n  queries: MetricQuery[];\n  debug?: boolean;\n}\n\nexport interface MetricQuery {\n  [key: string]: any;\n  datasourceId: number;\n  refId?: string;\n  maxDataPoints?: number;\n  intervalMs?: number;\n}\n\n// interface TsdbQuery {\n// \tTimeRange *TimeRange\n// \tQueries   []*Query\n// \tDebug     bool\n// }\n\n// type Query struct {\n// \tRefId         string\n// \tModel         *simplejson.Json\n// \tDataSource    *models.DataSource\n// \tMaxDataPoints int64\n// \tIntervalMs    int64\n// }\n\nexport interface CloudWatchMetricsAnnotation {\n  namespace: string;\n  metricName: string;\n  expression: string;\n  dimensions: {};\n  region: string;\n  id: string;\n  alias: string;\n  statistics: string[];\n  matchExact: true;\n  prefixMatching: false;\n  actionPrefix: string;\n  alarmNamePrefix: string;\n}\n","import React, { PureComponent } from 'react';\nimport { InlineFormLabel, LegacyForms, Button } from '@grafana/ui';\nconst { Select, Input } = LegacyForms;\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceOption,\n  onUpdateDatasourceResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n} from '@grafana/data';\nimport { SelectableValue } from '@grafana/data';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\nimport { CancelablePromise, makePromiseCancelable } from 'app/core/utils/CancelablePromise';\n\nconst authProviderOptions = [\n  { label: 'Access & secret key', value: 'keys' },\n  { label: 'Credentials file', value: 'credentials' },\n  { label: 'ARN', value: 'arn' },\n] as SelectableValue[];\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport interface State {\n  regions: SelectableValue[];\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      regions: [],\n    };\n  }\n\n  loadRegionsPromise: CancelablePromise<any> | null = null;\n\n  componentDidMount() {\n    this.loadRegionsPromise = makePromiseCancelable(this.loadRegions());\n    this.loadRegionsPromise.promise.catch(({ isCanceled }) => {\n      if (isCanceled) {\n        console.warn('Cloud Watch ConfigEditor has unmounted, intialization was canceled');\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.loadRegionsPromise) {\n      this.loadRegionsPromise.cancel();\n    }\n  }\n\n  async loadRegions() {\n    await getDatasourceSrv()\n      .loadDatasource(this.props.options.name)\n      .then((ds: CloudWatchDatasource) => ds.getRegions())\n      .then(\n        (regions: any) => {\n          this.setState({\n            regions: regions.map((region: any) => {\n              return {\n                value: region.value,\n                label: region.text,\n              };\n            }),\n          });\n        },\n        (err: any) => {\n          const regions = [\n            'af-south-1',\n            'ap-east-1',\n            'ap-northeast-1',\n            'ap-northeast-2',\n            'ap-northeast-3',\n            'ap-south-1',\n            'ap-southeast-1',\n            'ap-southeast-2',\n            'ca-central-1',\n            'cn-north-1',\n            'cn-northwest-1',\n            'eu-central-1',\n            'eu-north-1',\n            'eu-west-1',\n            'eu-west-2',\n            'eu-west-3',\n            'me-south-1',\n            'sa-east-1',\n            'us-east-1',\n            'us-east-2',\n            'us-gov-east-1',\n            'us-gov-west-1',\n            'us-iso-east-1',\n            'us-isob-east-1',\n            'us-west-1',\n            'us-west-2',\n          ];\n\n          this.setState({\n            regions: regions.map((region: string) => ({\n              value: region,\n              label: region,\n            })),\n          });\n\n          // expected to fail when creating new datasource\n          // console.error('failed to get latest regions', err);\n        }\n      );\n  }\n\n  render() {\n    const { regions } = this.state;\n    const { options } = this.props;\n    const secureJsonData = (options.secureJsonData || {}) as CloudWatchSecureJsonData;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">CloudWatch Details</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-14\">Auth Provider</InlineFormLabel>\n              <Select\n                className=\"width-30\"\n                value={authProviderOptions.find(authProvider => authProvider.value === options.jsonData.authType)}\n                options={authProviderOptions}\n                defaultValue={options.jsonData.authType}\n                onChange={option => {\n                  if (options.jsonData.authType === 'arn' && option.value !== 'arn') {\n                    delete this.props.options.jsonData.assumeRoleArn;\n                    delete this.props.options.jsonData.externalId;\n                  }\n                  onUpdateDatasourceJsonDataOptionSelect(this.props, 'authType')(option);\n                }}\n              />\n            </div>\n          </div>\n          {options.jsonData.authType === 'credentials' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel\n                  className=\"width-14\"\n                  tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n                >\n                  Credentials Profile Name\n                </InlineFormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"default\"\n                    value={options.jsonData.database}\n                    onChange={onUpdateDatasourceOption(this.props, 'database')}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          {options.jsonData.authType === 'keys' && (\n            <div>\n              {options.secureJsonFields?.accessKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <InlineFormLabel className=\"width-14\">Access Key ID</InlineFormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button\n                        variant=\"secondary\"\n                        type=\"button\"\n                        onClick={onUpdateDatasourceResetOption(this.props, 'accessKey')}\n                      >\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <InlineFormLabel className=\"width-14\">Access Key ID</InlineFormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={secureJsonData.accessKey || ''}\n                        onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'accessKey')}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n              {options.secureJsonFields?.secretKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <InlineFormLabel className=\"width-14\">Secret Access Key</InlineFormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button\n                        variant=\"secondary\"\n                        type=\"button\"\n                        onClick={onUpdateDatasourceResetOption(this.props, 'secretKey')}\n                      >\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <InlineFormLabel className=\"width-14\">Secret Access Key</InlineFormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={secureJsonData.secretKey || ''}\n                        onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'secretKey')}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          {options.jsonData.authType === 'arn' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-14\" tooltip=\"ARN of Assume Role\">\n                  Assume Role ARN\n                </InlineFormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"arn:aws:iam:*\"\n                    value={options.jsonData.assumeRoleArn || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(this.props, 'assumeRoleArn')}\n                  />\n                </div>\n              </div>\n              <div className=\"gf-form\">\n                <InlineFormLabel\n                  className=\"width-14\"\n                  tooltip=\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"\n                >\n                  External ID\n                </InlineFormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"External ID\"\n                    value={options.jsonData.externalId || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(this.props, 'externalId')}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel\n                className=\"width-14\"\n                tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n              >\n                Default Region\n              </InlineFormLabel>\n              <Select\n                className=\"width-30\"\n                value={regions.find(region => region.value === options.jsonData.defaultRegion)}\n                options={regions}\n                defaultValue={options.jsonData.defaultRegion}\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'defaultRegion')}\n              />\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-14\" tooltip=\"Namespaces of Custom Metrics.\">\n                Custom Metrics\n              </InlineFormLabel>\n              <Input\n                className=\"width-30\"\n                placeholder=\"Namespace1,Namespace2\"\n                value={options.jsonData.customMetricsNamespaces || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'customMetricsNamespaces')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://grafana.com/docs/features/datasources/cloudwatch/#service-quotas`}\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","// Libraries\nimport _ from 'lodash';\n\n// Services & Utils\nimport syntax, {\n  QUERY_COMMANDS,\n  AGGREGATION_FUNCTIONS_STATS,\n  STRING_FUNCTIONS,\n  DATETIME_FUNCTIONS,\n  IP_FUNCTIONS,\n  BOOLEAN_FUNCTIONS,\n  NUMERIC_OPERATORS,\n  FIELD_AND_FILTER_FUNCTIONS,\n} from './syntax';\n\n// Types\nimport { CloudWatchQuery } from './types';\nimport { AbsoluteTimeRange, LanguageProvider, HistoryItem } from '@grafana/data';\n\nimport { CloudWatchDatasource } from './datasource';\nimport { TypeaheadInput, TypeaheadOutput, Token } from '@grafana/ui';\nimport Prism, { Grammar } from 'prismjs';\n\nexport type CloudWatchHistoryItem = HistoryItem<CloudWatchQuery>;\n\ntype TypeaheadContext = {\n  history?: CloudWatchHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n  logGroupNames?: string[];\n};\n\nexport class CloudWatchLanguageProvider extends LanguageProvider {\n  started: boolean;\n  initialRange: AbsoluteTimeRange;\n  datasource: CloudWatchDatasource;\n\n  constructor(datasource: CloudWatchDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[()]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = (url: string, params?: any): Promise<{ data: { data: string[] } }> => {\n    return this.datasource.awsRequest(url, params);\n  };\n\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = Promise.resolve().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  isStatsQuery(query: string): boolean {\n    const grammar = this.getSyntax();\n    const tokens = Prism.tokenize(query, grammar) ?? [];\n\n    return !!tokens.find(\n      token =>\n        typeof token !== 'string' &&\n        token.content.toString().toLowerCase() === 'stats' &&\n        token.type === 'query-command'\n    );\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { value } = input;\n\n    // Get tokens\n    const tokens = value?.data.get('tokens');\n\n    if (!tokens || !tokens.length) {\n      return { suggestions: [] };\n    }\n\n    const curToken: Token = tokens.filter(\n      (token: any) =>\n        token.offsets.start <= value!.selection?.start?.offset && token.offsets.end >= value!.selection?.start?.offset\n    )[0];\n\n    const isFirstToken = !curToken.prev;\n    const prevToken = prevNonWhitespaceToken(curToken);\n\n    const isCommandStart = isFirstToken || (!isFirstToken && prevToken?.types.includes('command-separator'));\n    if (isCommandStart) {\n      return this.getCommandCompletionItems();\n    }\n\n    if (isInsideFunctionParenthesis(curToken)) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? []);\n    }\n\n    if (isAfterKeyword('by', curToken)) {\n      return this.handleKeyword(context);\n    }\n\n    if (prevToken?.types.includes('comparison-operator')) {\n      return this.handleComparison(context);\n    }\n\n    const commandToken = previousCommandToken(curToken);\n    if (commandToken) {\n      return await this.handleCommand(commandToken, curToken, context);\n    }\n\n    return {\n      suggestions: [],\n    };\n  }\n\n  private fetchedFieldsCache:\n    | {\n        time: number;\n        logGroups: string[];\n        fields: string[];\n      }\n    | undefined;\n\n  private fetchFields = async (logGroups: string[]): Promise<string[]> => {\n    if (\n      this.fetchedFieldsCache &&\n      Date.now() - this.fetchedFieldsCache.time < 30 * 1000 &&\n      _.sortedUniq(this.fetchedFieldsCache.logGroups).join('|') === _.sortedUniq(logGroups).join('|')\n    ) {\n      return this.fetchedFieldsCache.fields;\n    }\n\n    const results = await Promise.all(\n      logGroups.map(logGroup => this.datasource.getLogGroupFields({ logGroupName: logGroup }))\n    );\n\n    const fields = [\n      ...new Set<string>(\n        results.reduce((acc: string[], cur) => acc.concat(cur.logGroupFields?.map(f => f.name) as string[]), [])\n      ).values(),\n    ];\n\n    this.fetchedFieldsCache = {\n      time: Date.now(),\n      logGroups,\n      fields,\n    };\n\n    return fields;\n  };\n\n  private handleKeyword = async (context?: TypeaheadContext): Promise<TypeaheadOutput> => {\n    const suggs = await this.getFieldCompletionItems(context?.logGroupNames ?? []);\n    const functionSuggestions = [\n      { prefixMatch: true, label: 'Functions', items: STRING_FUNCTIONS.concat(DATETIME_FUNCTIONS, IP_FUNCTIONS) },\n    ];\n    suggs.suggestions.push(...functionSuggestions);\n\n    return suggs;\n  };\n\n  private handleCommand = async (\n    commandToken: Token,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> => {\n    const queryCommand = commandToken.content.toLowerCase();\n    const prevToken = prevNonWhitespaceToken(curToken);\n    const currentTokenIsFirstArg = prevToken === commandToken;\n\n    if (queryCommand === 'sort') {\n      return this.handleSortCommand(currentTokenIsFirstArg, curToken, context);\n    }\n\n    if (queryCommand === 'parse') {\n      if (currentTokenIsFirstArg) {\n        return await this.getFieldCompletionItems(context?.logGroupNames ?? []);\n      }\n    }\n\n    const currentTokenIsAfterCommandAndEmpty = isTokenType(commandToken.next, 'whitespace') && !commandToken.next?.next;\n    const currentTokenIsAfterCommand =\n      currentTokenIsAfterCommandAndEmpty || nextNonWhitespaceToken(commandToken) === curToken;\n\n    const currentTokenIsComma = isTokenType(curToken, 'punctuation', ',');\n    const currentTokenIsCommaOrAfterComma = currentTokenIsComma || isTokenType(prevToken, 'punctuation', ',');\n\n    // We only show suggestions if we are after a command or after a comma which is a field separator\n    if (!(currentTokenIsAfterCommand || currentTokenIsCommaOrAfterComma)) {\n      return { suggestions: [] };\n    }\n\n    if (['display', 'fields'].includes(queryCommand)) {\n      const typeaheadOutput = await this.getFieldCompletionItems(context?.logGroupNames ?? []);\n      typeaheadOutput.suggestions.push(...this.getFieldAndFilterFunctionCompletionItems().suggestions);\n\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'stats') {\n      const typeaheadOutput = this.getStatsAggCompletionItems();\n      if (currentTokenIsComma || currentTokenIsAfterCommandAndEmpty) {\n        typeaheadOutput?.suggestions.forEach(group => {\n          group.skipFilter = true;\n        });\n      }\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'filter' && currentTokenIsFirstArg) {\n      const sugg = await this.getFieldCompletionItems(context?.logGroupNames ?? []);\n      const boolFuncs = this.getBoolFuncCompletionItems();\n      sugg.suggestions.push(...boolFuncs.suggestions);\n      return sugg;\n    }\n    return { suggestions: [] };\n  };\n\n  private async handleSortCommand(\n    isFirstArgument: boolean,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> {\n    if (isFirstArgument) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? []);\n    } else if (isTokenType(prevNonWhitespaceToken(curToken), 'field-name')) {\n      // suggest sort options\n      return {\n        suggestions: [\n          {\n            prefixMatch: true,\n            label: 'Sort Order',\n            items: [\n              {\n                label: 'asc',\n              },\n              { label: 'desc' },\n            ],\n          },\n        ],\n      };\n    }\n\n    return { suggestions: [] };\n  }\n\n  private handleComparison = async (context?: TypeaheadContext) => {\n    const fieldsSuggestions = await this.getFieldCompletionItems(context?.logGroupNames ?? []);\n    const comparisonSuggestions = this.getComparisonCompletionItems();\n    fieldsSuggestions.suggestions.push(...comparisonSuggestions.suggestions);\n    return fieldsSuggestions;\n  };\n\n  private getCommandCompletionItems = (): TypeaheadOutput => {\n    return { suggestions: [{ prefixMatch: true, label: 'Commands', items: QUERY_COMMANDS }] };\n  };\n\n  private getFieldAndFilterFunctionCompletionItems = (): TypeaheadOutput => {\n    return { suggestions: [{ prefixMatch: true, label: 'Functions', items: FIELD_AND_FILTER_FUNCTIONS }] };\n  };\n\n  private getStatsAggCompletionItems = (): TypeaheadOutput => {\n    return { suggestions: [{ prefixMatch: true, label: 'Functions', items: AGGREGATION_FUNCTIONS_STATS }] };\n  };\n\n  private getBoolFuncCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          prefixMatch: true,\n          label: 'Functions',\n          items: BOOLEAN_FUNCTIONS,\n        },\n      ],\n    };\n  };\n\n  private getComparisonCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          prefixMatch: true,\n          label: 'Functions',\n          items: NUMERIC_OPERATORS.concat(BOOLEAN_FUNCTIONS),\n        },\n      ],\n    };\n  };\n\n  private getFieldCompletionItems = async (logGroups: string[]): Promise<TypeaheadOutput> => {\n    const fields = await this.fetchFields(logGroups);\n\n    return {\n      suggestions: [\n        {\n          label: 'Fields',\n          items: fields.map(field => ({\n            label: field,\n            insertText: field.match(/@?[_a-zA-Z]+[_.0-9a-zA-Z]*/) ? undefined : `\\`${field}\\``,\n          })),\n        },\n      ],\n    };\n  };\n}\n\nfunction nextNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.next) {\n    if (curToken.next.types.includes('whitespace')) {\n      curToken = curToken.next;\n    } else {\n      return curToken.next;\n    }\n  }\n\n  return null;\n}\n\nfunction prevNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.prev) {\n    if (isTokenType(curToken.prev, 'whitespace')) {\n      curToken = curToken.prev;\n    } else {\n      return curToken.prev;\n    }\n  }\n\n  return null;\n}\n\nfunction previousCommandToken(startToken: Token): Token | null {\n  let thisToken = startToken;\n  while (!!thisToken.prev) {\n    thisToken = thisToken.prev;\n    if (\n      thisToken.types.includes('query-command') &&\n      (!thisToken.prev || isTokenType(prevNonWhitespaceToken(thisToken), 'command-separator'))\n    ) {\n      return thisToken;\n    }\n  }\n  return null;\n}\n\nconst funcsWithFieldArgs = [\n  'avg',\n  'count',\n  'count_distinct',\n  'earliest',\n  'latest',\n  'sortsFirst',\n  'sortsLast',\n  'max',\n  'min',\n  'pct',\n  'stddev',\n  'ispresent',\n  'fromMillis',\n  'toMillis',\n  'isempty',\n  'isblank',\n  'isValidIp',\n  'isValidIpV4',\n  'isValidIpV6',\n  'isIpInSubnet',\n  'isIpv4InSubnet',\n  'isIpv6InSubnet',\n].map(funcName => funcName.toLowerCase());\n\n/**\n * Returns true if cursor is currently inside a function parenthesis for example `count(|)` or `count(@mess|)` should\n * return true.\n */\nfunction isInsideFunctionParenthesis(curToken: Token): boolean {\n  const prevToken = prevNonWhitespaceToken(curToken);\n\n  if (!prevToken) {\n    return false;\n  }\n\n  const parenthesisToken = curToken.content === '(' ? curToken : prevToken.content === '(' ? prevToken : undefined;\n  if (parenthesisToken) {\n    const maybeFunctionToken = prevNonWhitespaceToken(parenthesisToken);\n    if (maybeFunctionToken) {\n      return (\n        funcsWithFieldArgs.includes(maybeFunctionToken.content.toLowerCase()) &&\n        maybeFunctionToken.types.includes('function')\n      );\n    }\n  }\n  return false;\n}\n\nfunction isAfterKeyword(keyword: string, token: Token): boolean {\n  const maybeKeyword = getPreviousTokenExcluding(token, [\n    'whitespace',\n    'function',\n    'punctuation',\n    'field-name',\n    'number',\n  ]);\n  if (isTokenType(maybeKeyword, 'keyword', 'by')) {\n    const prev = getPreviousTokenExcluding(token, ['whitespace']);\n    if (prev === maybeKeyword || isTokenType(prev, 'punctuation', ',')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isTokenType(token: Token | undefined | null, type: string, content?: string): boolean {\n  if (!token?.types.includes(type)) {\n    return false;\n  }\n  if (content) {\n    if (token?.content.toLowerCase() !== content) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype TokenDef = string | { type: string; value: string };\nfunction getPreviousTokenExcluding(token: Token, exclude: TokenDef[]): Token | undefined | null {\n  let curToken = token.prev;\n  main: while (curToken) {\n    for (const item of exclude) {\n      if (typeof item === 'string') {\n        if (curToken.types.includes(item)) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      } else {\n        if (curToken.types.includes(item.type) && curToken.content.toLowerCase() === item.value) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      }\n    }\n    break;\n  }\n  return curToken;\n}\n","import { SchedulerLike, Observable, SchedulerAction, Subscriber, asyncScheduler } from 'rxjs';\n\n/**\n * Creates an Observable that emits sequential numbers after increasing intervals of time\n * starting with `startPeriod`, ending with `endPeriod` and incrementing by `step`.\n */\nexport const increasingInterval = (\n  { startPeriod = 0, endPeriod = 5000, step = 1000 },\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> => {\n  return new Observable<number>(subscriber => {\n    subscriber.add(\n      scheduler.schedule(dispatch, startPeriod, { subscriber, counter: 0, period: startPeriod, step, endPeriod })\n    );\n    return subscriber;\n  });\n};\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state: IntervalState) {\n  const { subscriber, counter, period, step, endPeriod } = state;\n  subscriber.next(counter);\n  const newPeriod = Math.min(period + step, endPeriod);\n  this.schedule({ subscriber, counter: counter + 1, period: newPeriod, step, endPeriod }, newPeriod);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n  endPeriod: number;\n  step: number;\n}\n","import React from 'react';\nimport angular from 'angular';\nimport _ from 'lodash';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { AppNotificationTimeout } from 'app/types';\nimport { store } from 'app/store/store';\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  dateMath,\n  LoadingState,\n  LogRowModel,\n  ScopedVars,\n  TimeRange,\n  toDataFrame,\n  rangeUtil,\n  DataQueryErrorType,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\nimport memoizedDebounce from './memoizedDebounce';\nimport {\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchLogsQueryStatus,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  DescribeLogGroupsRequest,\n  GetLogEventsRequest,\n  GetLogGroupFieldsRequest,\n  GetLogGroupFieldsResponse,\n  LogAction,\n  MetricQuery,\n  MetricRequest,\n  TSDBResponse,\n  isCloudWatchLogsQuery,\n} from './types';\nimport { from, Observable, of, merge, zip } from 'rxjs';\nimport { catchError, finalize, map, mergeMap, tap, concatMap, scan, share, repeat, takeWhile } from 'rxjs/operators';\nimport { CloudWatchLanguageProvider } from './language_provider';\n\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport { AwsUrl, encodeUrl } from './aws_url';\nimport { increasingInterval } from './utils/rxjs/increasingInterval';\n\nconst TSDB_QUERY_ENDPOINT = '/api/tsdb/query';\n\n// Constants also defined in tsdb/cloudwatch/cloudwatch.go\nconst LOG_IDENTIFIER_INTERNAL = '__log__grafana_internal__';\nconst LOGSTREAM_IDENTIFIER_INTERNAL = '__logstream__grafana_internal__';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n\nexport const MAX_ATTEMPTS = 5;\n\nexport class CloudWatchDatasource extends DataSourceApi<CloudWatchQuery, CloudWatchJsonData> {\n  type: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  standardStatistics: any;\n  datasourceName: string;\n  debouncedAlert: (datasourceName: string, region: string) => void;\n  debouncedCustomAlert: (title: string, message: string) => void;\n  logQueries: Record<string, { id: string; region: string; statsQuery: boolean }>;\n  languageProvider: CloudWatchLanguageProvider;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.type = 'cloudwatch';\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.datasourceName = instanceSettings.name;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n    this.debouncedAlert = memoizedDebounce(displayAlert, AppNotificationTimeout.Error);\n    this.debouncedCustomAlert = memoizedDebounce(displayCustomError, AppNotificationTimeout.Error);\n    this.logQueries = {};\n\n    this.languageProvider = new CloudWatchLanguageProvider(this);\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>): Observable<DataQueryResponse> {\n    options = angular.copy(options);\n\n    let queries = options.targets.filter(item => item.id !== '' || item.hide !== true);\n    const { logQueries, metricsQueries } = this.getTargetsByQueryMode(queries);\n\n    const dataQueryResponses: Array<Observable<DataQueryResponse>> = [];\n    if (logQueries.length > 0) {\n      dataQueryResponses.push(this.handleLogQueries(logQueries, options));\n    }\n\n    if (metricsQueries.length > 0) {\n      dataQueryResponses.push(this.handleMetricQueries(metricsQueries, options));\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(dataQueryResponses)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...dataQueryResponses);\n  }\n\n  handleLogQueries = (\n    logQueries: CloudWatchLogsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const validLogQueries = logQueries.filter(item => item.logGroupNames?.length);\n    if (logQueries.length > validLogQueries.length) {\n      return of({ data: [], error: { message: 'Log group is required' } });\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(validLogQueries)) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    const queryParams = validLogQueries.map((target: CloudWatchLogsQuery) => ({\n      queryString: target.expression,\n      refId: target.refId,\n      logGroupNames: target.logGroupNames,\n      region: this.replace(this.getActualRegion(target.region), options.scopedVars, true, 'region'),\n    }));\n\n    return this.makeLogActionRequest('StartQuery', queryParams, options.scopedVars).pipe(\n      mergeMap(dataFrames =>\n        this.logsQuery(\n          dataFrames.map(dataFrame => ({\n            queryId: dataFrame.fields[0].values.get(0),\n            region: dataFrame.meta?.custom?.['Region'] ?? 'default',\n            refId: dataFrame.refId!,\n            statsGroups: (logQueries.find(target => target.refId === dataFrame.refId)! as CloudWatchLogsQuery)\n              .statsGroups,\n          }))\n        )\n      ),\n      map(response => this.addDataLinksToLogsResponse(response, options))\n    );\n  };\n\n  handleMetricQueries = (\n    metricQueries: CloudWatchMetricsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const validMetricsQueries = metricQueries\n      .filter(\n        item =>\n          (!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression?.length > 0\n      )\n      .map(\n        (item: CloudWatchMetricsQuery): MetricQuery => {\n          item.region = this.replace(this.getActualRegion(item.region), options.scopedVars, true, 'region');\n          item.namespace = this.replace(item.namespace, options.scopedVars, true, 'namespace');\n          item.metricName = this.replace(item.metricName, options.scopedVars, true, 'metric name');\n          item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n          item.statistics = item.statistics.map(stat => this.replace(stat, options.scopedVars, true, 'statistics'));\n          item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n          item.id = this.templateSrv.replace(item.id, options.scopedVars);\n          item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n\n          // valid ExtendedStatistics is like p90.00, check the pattern\n          const hasInvalidStatistics = item.statistics.some(s => {\n            if (s.indexOf('p') === 0) {\n              const matches = /^p\\d{2}(?:\\.\\d{1,2})?$/.exec(s);\n              return !matches || matches[0] !== s;\n            }\n\n            return false;\n          });\n\n          if (hasInvalidStatistics) {\n            throw { message: 'Invalid extended statistics' };\n          }\n\n          return {\n            intervalMs: options.intervalMs,\n            maxDataPoints: options.maxDataPoints,\n            datasourceId: this.id,\n            type: 'timeSeriesQuery',\n            ...item,\n          };\n        }\n      );\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(validMetricsQueries)) {\n      return of({ data: [] });\n    }\n\n    const request = {\n      from: options?.range?.from.valueOf().toString(),\n      to: options?.range?.to.valueOf().toString(),\n      queries: validMetricsQueries,\n    };\n\n    return from(this.performTimeSeriesQuery(request, options.range));\n  };\n\n  logsQuery(\n    queryParams: Array<{ queryId: string; refId: string; limit?: number; region: string; statsGroups?: string[] }>\n  ): Observable<DataQueryResponse> {\n    this.logQueries = {};\n    queryParams.forEach(param => {\n      this.logQueries[param.refId] = {\n        id: param.queryId,\n        region: param.region,\n        statsQuery: (param.statsGroups?.length ?? 0) > 0 ?? false,\n      };\n    });\n\n    const dataFrames = increasingInterval({ startPeriod: 100, endPeriod: 1000, step: 300 }).pipe(\n      concatMap(_ => this.makeLogActionRequest('GetQueryResults', queryParams)),\n      repeat(),\n      share()\n    );\n\n    const consecutiveFailedAttempts = dataFrames.pipe(\n      scan(\n        ({ failures, prevRecordsMatched }, frames) => {\n          failures++;\n          for (const frame of frames) {\n            const recordsMatched = frame.meta?.stats?.find(stat => stat.displayName === 'Records matched')?.value!;\n            if (recordsMatched > (prevRecordsMatched[frame.refId!] ?? 0)) {\n              failures = 0;\n            }\n            prevRecordsMatched[frame.refId!] = recordsMatched;\n          }\n\n          return { failures, prevRecordsMatched };\n        },\n        { failures: 0, prevRecordsMatched: {} as Record<string, number> }\n      ),\n      map(({ failures }) => failures),\n      share()\n    );\n\n    const queryResponse: Observable<DataQueryResponse> = zip(dataFrames, consecutiveFailedAttempts).pipe(\n      tap(([dataFrames]) => {\n        for (const frame of dataFrames) {\n          if (\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(frame.meta?.custom?.['Status']) &&\n            this.logQueries.hasOwnProperty(frame.refId!)\n          ) {\n            delete this.logQueries[frame.refId!];\n          }\n        }\n      }),\n      map(([dataFrames, failedAttempts]) => {\n        if (failedAttempts >= MAX_ATTEMPTS) {\n          for (const frame of dataFrames) {\n            _.set(frame, 'meta.custom.Status', CloudWatchLogsQueryStatus.Cancelled);\n          }\n        }\n\n        return {\n          data: dataFrames,\n          key: 'test-key',\n          state: dataFrames.every(dataFrame =>\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(dataFrame.meta?.custom?.['Status'])\n          )\n            ? LoadingState.Done\n            : LoadingState.Loading,\n          error:\n            failedAttempts >= MAX_ATTEMPTS\n              ? {\n                  message: `error: query timed out after ${MAX_ATTEMPTS} attempts`,\n                  type: DataQueryErrorType.Timeout,\n                }\n              : undefined,\n        };\n      }),\n      takeWhile(({ state }) => state !== LoadingState.Error && state !== LoadingState.Done, true)\n    );\n\n    return withTeardown(queryResponse, () => this.stopQueries());\n  }\n\n  private addDataLinksToLogsResponse(response: DataQueryResponse, options: DataQueryRequest<CloudWatchQuery>) {\n    for (const dataFrame of response.data as DataFrame[]) {\n      const range = this.timeSrv.timeRange();\n      const start = range.from.toISOString();\n      const end = range.to.toISOString();\n\n      const curTarget = options.targets.find(target => target.refId === dataFrame.refId) as CloudWatchLogsQuery;\n      const interpolatedGroups =\n        curTarget.logGroupNames?.map((logGroup: string) =>\n          this.replace(logGroup, options.scopedVars, true, 'log groups')\n        ) ?? [];\n      const urlProps: AwsUrl = {\n        end,\n        start,\n        timeType: 'ABSOLUTE',\n        tz: 'UTC',\n        editorString: curTarget.expression ? this.replace(curTarget.expression, options.scopedVars, true) : '',\n        isLiveTail: false,\n        source: interpolatedGroups,\n      };\n\n      const encodedUrl = encodeUrl(\n        urlProps,\n        this.getActualRegion(this.replace(curTarget.region, options.scopedVars, true, 'region'))\n      );\n\n      for (const field of dataFrame.fields) {\n        field.config.links = [\n          {\n            url: encodedUrl,\n            title: 'View in CloudWatch console',\n            targetBlank: true,\n          },\n        ];\n      }\n    }\n\n    return response;\n  }\n\n  stopQueries() {\n    if (Object.keys(this.logQueries).length > 0) {\n      this.makeLogActionRequest(\n        'StopQuery',\n        Object.values(this.logQueries).map(logQuery => ({ queryId: logQuery.id, region: logQuery.region })),\n        undefined,\n        false\n      ).pipe(\n        finalize(() => {\n          this.logQueries = {};\n        })\n      );\n    }\n  }\n\n  async describeLogGroups(params: DescribeLogGroupsRequest): Promise<string[]> {\n    const dataFrames = await this.makeLogActionRequest('DescribeLogGroups', [params]).toPromise();\n\n    const logGroupNames = dataFrames[0]?.fields[0]?.values.toArray() ?? [];\n    return logGroupNames;\n  }\n\n  async getLogGroupFields(params: GetLogGroupFieldsRequest): Promise<GetLogGroupFieldsResponse> {\n    const dataFrames = await this.makeLogActionRequest('GetLogGroupFields', [params]).toPromise();\n\n    const fieldNames = dataFrames[0].fields[0].values.toArray();\n    const fieldPercentages = dataFrames[0].fields[1].values.toArray();\n    const getLogGroupFieldsResponse = {\n      logGroupFields: fieldNames.map((val, i) => ({ name: val, percent: fieldPercentages[i] })) ?? [],\n    };\n\n    return getLogGroupFieldsResponse;\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    { limit = 10, direction = 'BACKWARD' }: RowContextOptions = {}\n  ): Promise<{ data: DataFrame[] }> => {\n    let logStreamField = null;\n    let logField = null;\n\n    for (const field of row.dataFrame.fields) {\n      if (field.name === LOGSTREAM_IDENTIFIER_INTERNAL) {\n        logStreamField = field;\n        if (logField !== null) {\n          break;\n        }\n      } else if (field.name === LOG_IDENTIFIER_INTERNAL) {\n        logField = field;\n        if (logStreamField !== null) {\n          break;\n        }\n      }\n    }\n\n    const requestParams: GetLogEventsRequest = {\n      limit,\n      startFromHead: direction !== 'BACKWARD',\n      logGroupName: parseLogGroupName(logField!.values.get(row.rowIndex)),\n      logStreamName: logStreamField!.values.get(row.rowIndex),\n    };\n\n    if (direction === 'BACKWARD') {\n      requestParams.endTime = row.timeEpochMs;\n    } else {\n      requestParams.startTime = row.timeEpochMs;\n    }\n\n    const dataFrames = await this.makeLogActionRequest('GetLogEvents', [requestParams]).toPromise();\n\n    return {\n      data: dataFrames,\n    };\n  };\n\n  get variables() {\n    return this.templateSrv.getVariables().map(v => `$${v.name}`);\n  }\n\n  getPeriod(target: CloudWatchMetricsQuery, options: any) {\n    let period = this.templateSrv.replace(target.period, options.scopedVars) as any;\n    if (period && period.toLowerCase() !== 'auto') {\n      if (/^\\d+$/.test(period)) {\n        period = parseInt(period, 10);\n      } else {\n        period = rangeUtil.intervalToSeconds(period);\n      }\n\n      if (period < 1) {\n        period = 1;\n      }\n    }\n\n    return period || '';\n  }\n\n  buildCloudwatchConsoleUrl(\n    { region, namespace, metricName, dimensions, statistics, expression }: CloudWatchMetricsQuery,\n    start: string,\n    end: string,\n    title: string,\n    gmdMeta: Array<{ Expression: string; Period: string }>\n  ) {\n    region = this.getActualRegion(region);\n    let conf = {\n      view: 'timeSeries',\n      stacked: false,\n      title,\n      start,\n      end,\n      region,\n    } as any;\n\n    const isSearchExpression =\n      gmdMeta && gmdMeta.length && gmdMeta.every(({ Expression: expression }) => /SEARCH().*/.test(expression));\n    const isMathExpression = !isSearchExpression && expression;\n\n    if (isMathExpression) {\n      return '';\n    }\n\n    if (isSearchExpression) {\n      const metrics: any =\n        gmdMeta && gmdMeta.length ? gmdMeta.map(({ Expression: expression }) => ({ expression })) : [{ expression }];\n      conf = { ...conf, metrics };\n    } else {\n      conf = {\n        ...conf,\n        metrics: [\n          ...statistics.map(stat => [\n            namespace,\n            metricName,\n            ...Object.entries(dimensions).reduce((acc, [key, value]) => [...acc, key, value[0]], []),\n            {\n              stat,\n              period: gmdMeta.length ? gmdMeta[0].Period : 60,\n            },\n          ]),\n        ],\n      };\n    }\n\n    return `https://${region}.console.aws.amazon.com/cloudwatch/deeplink.js?region=${region}#metricsV2:graph=${encodeURIComponent(\n      JSON.stringify(conf)\n    )}`;\n  }\n\n  performTimeSeriesQuery(request: MetricRequest, { from, to }: TimeRange): Promise<any> {\n    return this.awsRequest(TSDB_QUERY_ENDPOINT, request)\n      .then((res: TSDBResponse) => {\n        if (!res.results) {\n          return { data: [] };\n        }\n        return Object.values(request.queries).reduce(\n          ({ data, error }: any, queryRequest: any) => {\n            const queryResult = res.results[queryRequest.refId];\n            if (!queryResult) {\n              return { data, error };\n            }\n\n            const link = this.buildCloudwatchConsoleUrl(\n              queryRequest,\n              from.toISOString(),\n              to.toISOString(),\n              queryRequest.refId,\n              queryResult.meta.gmdMeta\n            );\n\n            return {\n              error: error || queryResult.error ? { message: queryResult.error } : null,\n              data: [\n                ...data,\n                ...queryResult.series.map(({ name, points }: any) => {\n                  const dataFrame = toDataFrame({\n                    target: name,\n                    datapoints: points,\n                    refId: queryRequest.refId,\n                    meta: queryResult.meta,\n                  });\n                  if (link) {\n                    for (const field of dataFrame.fields) {\n                      field.config.links = [\n                        {\n                          url: link,\n                          title: 'View in CloudWatch console',\n                          targetBlank: true,\n                        },\n                      ];\n                    }\n                  }\n                  return dataFrame;\n                }),\n              ],\n            };\n          },\n          { data: [], error: null }\n        );\n      })\n      .catch((err: any = { data: { error: '' } }) => {\n        if (/^Throttling:.*/.test(err.data.message)) {\n          const failedRedIds = Object.keys(err.data.results);\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }) =>\n              (refId && !failedRedIds.includes(refId)) || res.includes(region) ? res : [...res, region],\n            []\n          ) as string[];\n\n          regionsAffected.forEach(region => this.debouncedAlert(this.datasourceName, this.getActualRegion(region)));\n        }\n\n        if (err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.data.message = err.data.error;\n        }\n\n        throw err;\n      });\n  }\n\n  transformSuggestDataFromTable(suggestData: TSDBResponse) {\n    return suggestData.results['metricFindQuery'].tables[0].rows.map(([text, value]) => ({\n      text,\n      value,\n      label: value,\n    }));\n  }\n\n  doMetricQueryRequest(subtype: string, parameters: any) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest(TSDB_QUERY_ENDPOINT, {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        {\n          refId: 'metricFindQuery',\n          intervalMs: 1, // dummy\n          maxDataPoints: 1, // dummy\n          datasourceId: this.id,\n          type: 'metricFindQuery',\n          subtype: subtype,\n          ...parameters,\n        },\n      ],\n    }).then((r: TSDBResponse) => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  makeLogActionRequest(\n    subtype: LogAction,\n    queryParams: any[],\n    scopedVars?: ScopedVars,\n    makeReplacements = true\n  ): Observable<DataFrame[]> {\n    const range = this.timeSrv.timeRange();\n\n    const requestParams = {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: queryParams.map((param: any) => ({\n        refId: 'A',\n        intervalMs: 1, // dummy\n        maxDataPoints: 1, // dummy\n        datasourceId: this.id,\n        type: 'logAction',\n        subtype: subtype,\n        ...param,\n      })),\n    };\n\n    if (makeReplacements) {\n      requestParams.queries.forEach(query => {\n        if (query.hasOwnProperty('queryString')) {\n          query.queryString = this.replace(query.queryString, scopedVars, true);\n        }\n        query.region = this.replace(query.region, scopedVars, true, 'region');\n        query.region = this.getActualRegion(query.region);\n\n        // interpolate log groups\n        if (query.logGroupNames) {\n          query.logGroupNames = query.logGroupNames.map((logGroup: string) =>\n            this.replace(logGroup, scopedVars, true, 'log groups')\n          );\n        }\n      });\n    }\n\n    const resultsToDataFrames = (val: any): DataFrame[] => toDataQueryResponse(val).data || [];\n\n    return from(this.awsRequest(TSDB_QUERY_ENDPOINT, requestParams)).pipe(\n      map(response => resultsToDataFrames({ data: response })),\n      catchError(err => {\n        if (err.data?.error) {\n          throw err.data.error;\n        }\n\n        throw err;\n      })\n    );\n  }\n\n  getRegions(): Promise<Array<{ label: string; value: string; text: string }>> {\n    return this.doMetricQueryRequest('regions', null).then((regions: any) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions,\n    ]);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  async getMetrics(namespace: string, region?: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionKeys(namespace: string, region: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string,\n    metricName: string,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n\n    return values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricQueryRequest('resource_arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: tags,\n    });\n  }\n\n  async metricFindQuery(query: string) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    const resourceARNsQuery = query.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (resourceARNsQuery) {\n      region = resourceARNsQuery[1];\n      const resourceType = resourceARNsQuery[2];\n      const tagsJSON = JSON.parse(this.templateSrv.replace(resourceARNsQuery[3]));\n      return this.getResourceARNs(region, resourceType, tagsJSON);\n    }\n\n    const statsQuery = query.match(/^statistics\\(\\)/);\n    if (statsQuery) {\n      return this.standardStatistics.map((s: string) => ({ value: s, label: s, text: s }));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const statistics = annotation.statistics.map((s: any) => this.templateSrv.replace(s));\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest(TSDB_QUERY_ENDPOINT, {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        {\n          refId: 'annotationQuery',\n          datasourceId: this.id,\n          type: 'annotationQuery',\n          ...parameters,\n        },\n      ],\n    }).then((r: TSDBResponse) => {\n      return r.results['annotationQuery'].tables[0].rows.map(v => ({\n        annotation: annotation,\n        time: Date.parse(v[0]),\n        title: v[1],\n        tags: [v[2]],\n        text: v[3],\n      }));\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      this.templateSrv.variableExists(target.expression!) ||\n      target.logGroupNames?.some((logGroup: string) => this.templateSrv.variableExists(logGroup)) ||\n      _.find(target.dimensions, (v, k) => this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v))\n    );\n  }\n\n  testDatasource() {\n    // use billing metrics for test\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(() => ({\n      status: 'success',\n      message: 'Data source is working',\n    }));\n  }\n\n  async awsRequest(url: string, data: MetricRequest) {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n    };\n\n    const result = await getBackendSrv().datasourceRequest(options);\n\n    return result.data;\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  showContextToggle() {\n    return true;\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: { [key: string]: string | string[] }, scopedVars: ScopedVars) {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replace(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      const valueVar = this.templateSrv\n        .getVariables()\n        .find(({ name }) => name === this.templateSrv.getVariableName(value));\n      if (valueVar) {\n        if (((valueVar as unknown) as VariableWithMultiSupport).multi) {\n          const values = this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n          return { ...result, [key]: values };\n        }\n        return { ...result, [key]: [this.templateSrv.replace(value, scopedVars)] };\n      }\n\n      return { ...result, [key]: [value] };\n    }, {});\n  }\n\n  replace(\n    target?: string,\n    scopedVars?: ScopedVars,\n    displayErrorIfIsMultiTemplateVariable?: boolean,\n    fieldName?: string\n  ) {\n    if (displayErrorIfIsMultiTemplateVariable && !!target) {\n      const variable = this.templateSrv\n        .getVariables()\n        .find(({ name }) => name === this.templateSrv.getVariableName(target));\n      if (variable && ((variable as unknown) as VariableWithMultiSupport).multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n\n  getQueryDisplayText(query: CloudWatchQuery) {\n    if (query.queryMode === 'Logs') {\n      return query.expression ?? '';\n    } else {\n      return JSON.stringify(query);\n    }\n  }\n\n  getTargetsByQueryMode = (targets: CloudWatchQuery[]) => {\n    const logQueries: CloudWatchLogsQuery[] = [];\n    const metricsQueries: CloudWatchMetricsQuery[] = [];\n\n    targets.forEach(query => {\n      const mode = query.queryMode ?? 'Metrics';\n      if (mode === 'Logs') {\n        logQueries.push(query as CloudWatchLogsQuery);\n      } else {\n        metricsQueries.push(query as CloudWatchMetricsQuery);\n      }\n    });\n\n    return {\n      logQueries,\n      metricsQueries,\n    };\n  };\n\n  interpolateVariablesInQueries(queries: CloudWatchQuery[], scopedVars: ScopedVars): CloudWatchQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map(query => ({\n      ...query,\n      region: this.getActualRegion(this.replace(query.region, scopedVars)),\n      expression: this.replace(query.expression, scopedVars),\n\n      ...(!isCloudWatchLogsQuery(query) && this.interpolateMetricsQueryVariables(query, scopedVars)),\n    }));\n  }\n\n  interpolateMetricsQueryVariables(\n    query: CloudWatchMetricsQuery,\n    scopedVars: ScopedVars\n  ): Pick<CloudWatchMetricsQuery, 'alias' | 'metricName' | 'namespace' | 'period' | 'dimensions'> {\n    return {\n      alias: this.replace(query.alias, scopedVars),\n      metricName: this.replace(query.metricName, scopedVars),\n      namespace: this.replace(query.namespace, scopedVars),\n      period: this.replace(query.period, scopedVars),\n      dimensions: Object.entries(query.dimensions).reduce((prev, [key, value]) => {\n        if (Array.isArray(value)) {\n          return { ...prev, [key]: value };\n        }\n\n        return { ...prev, [this.replace(key, scopedVars)]: this.replace(value, scopedVars) };\n      }, {}),\n    };\n  }\n}\n\nfunction withTeardown<T = any>(observable: Observable<T>, onUnsubscribe: () => void): Observable<T> {\n  return new Observable<T>(subscriber => {\n    const innerSub = observable.subscribe({\n      next: val => subscriber.next(val),\n      error: err => subscriber.next(err),\n      complete: () => subscriber.complete(),\n    });\n\n    return () => {\n      innerSub.unsubscribe();\n      onUnsubscribe();\n    };\n  });\n}\n\nfunction parseLogGroupName(logIdentifier: string): string {\n  const colonIndex = logIdentifier.lastIndexOf(':');\n  return logIdentifier.substr(colonIndex + 1);\n}\n","import _ from 'lodash';\nimport { AnnotationQuery } from './types';\n\nexport class CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    _.defaultsDeep(this.annotation, {\n      namespace: '',\n      metricName: '',\n      expression: '',\n      dimensions: {},\n      region: 'default',\n      id: '',\n      alias: '',\n      statistics: ['Average'],\n      matchExact: true,\n      prefixMatching: false,\n      actionPrefix: '',\n      alarmNamePrefix: '',\n    });\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(query: AnnotationQuery) {\n    Object.assign(this.annotation, query);\n  }\n}\n","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      }\n\n      // else, return a transformed end result of processing the template with our tag\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    };\n\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n      return this.transformers.reduce(cb, str);\n    }\n\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n      return this.transformers.reduce(cb, substitution);\n    }\n\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvdHJpbVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNpZGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBTUEsd0JBQXdCLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFDQyxJQUFELHVFQUFRLEVBQVI7QUFBQSxTQUFnQjtBQUM1Q0MsZUFENEMsdUJBQ2hDQyxTQURnQyxFQUNyQjtBQUNyQixVQUFJRixTQUFTLEVBQWIsRUFBaUI7QUFDZixlQUFPRSxVQUFVQyxJQUFWLEVBQVA7QUFDRDs7QUFFREgsYUFBT0EsS0FBS0ksV0FBTCxFQUFQOztBQUVBLFVBQUlKLFNBQVMsT0FBVCxJQUFvQkEsU0FBUyxNQUFqQyxFQUF5QztBQUN2QyxlQUFPRSxVQUFVRyxPQUFWLENBQWtCLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDs7QUFFRCxVQUFJTCxTQUFTLEtBQVQsSUFBa0JBLFNBQVMsT0FBL0IsRUFBd0M7QUFDdEMsZUFBT0UsVUFBVUcsT0FBVixDQUFrQixNQUFsQixFQUEwQixFQUExQixDQUFQO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJQyxLQUFKLDBCQUFpQ04sSUFBakMsQ0FBTjtBQUNEO0FBakIyQyxHQUFoQjtBQUFBLENBQTlCOztBQW9CQSxlQUFlRCxxQkFBZiIsImZpbGUiOiJ0cmltUmVzdWx0VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyIHRoYXQgdHJpbXMgd2hpdGVzcGFjZSBvbiB0aGUgZW5kIHJlc3VsdCBvZiBhIHRhZ2dlZCB0ZW1wbGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBzaWRlID0gJycgLSBUaGUgc2lkZSBvZiB0aGUgc3RyaW5nIHRvIHRyaW0uIENhbiBiZSAnc3RhcnQnIG9yICdlbmQnIChhbHRlcm5hdGl2ZWx5ICdsZWZ0JyBvciAncmlnaHQnKVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciA9IChzaWRlID0gJycpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChzaWRlID09PSAnJykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc2lkZSA9IHNpZGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChzaWRlID09PSAnc3RhcnQnIHx8IHNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ2VuZCcgfHwgc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFNpZGUgbm90IHN1cHBvcnRlZDogJHtzaWRlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lcjtcbiJdfQ==","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n        return endResult;\n      }\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInR5cGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIm1hdGNoIiwiaW5kZW50IiwiTWF0aCIsIm1pbiIsIm1hcCIsImVsIiwibGVuZ3RoIiwicmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQU1BLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcERDLGVBRG9ELHVCQUN4Q0MsU0FEd0MsRUFDN0I7QUFDckIsVUFBSUYsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBTUcsUUFBUUQsVUFBVUMsS0FBVixDQUFnQixtQkFBaEIsQ0FBZDtBQUNBLFlBQU1DLFNBQVNELFNBQVNFLEtBQUtDLEdBQUwsZ0NBQVlILE1BQU1JLEdBQU4sQ0FBVTtBQUFBLGlCQUFNQyxHQUFHQyxNQUFUO0FBQUEsU0FBVixDQUFaLEVBQXhCO0FBQ0EsWUFBSUwsTUFBSixFQUFZO0FBQ1YsY0FBTU0sU0FBUyxJQUFJQyxNQUFKLFNBQWlCUCxNQUFqQixRQUE0QixJQUE1QixDQUFmO0FBQ0EsaUJBQU9GLFVBQVVVLE9BQVYsQ0FBa0JGLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDtBQUNELGVBQU9SLFNBQVA7QUFDRDtBQUNELFVBQUlGLFNBQVMsS0FBYixFQUFvQjtBQUNsQjtBQUNBLGVBQU9FLFVBQVVVLE9BQVYsQ0FBa0IsYUFBbEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNEO0FBQ0QsWUFBTSxJQUFJQyxLQUFKLG9CQUEyQmIsSUFBM0IsQ0FBTjtBQUNEO0FBakJtRCxHQUF2QjtBQUFBLENBQS9COztBQW9CQSxlQUFlRCxzQkFBZiIsImZpbGUiOiJzdHJpcEluZGVudFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzdHJpcHMgaW5kZW50YXRpb24gZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSA9ICdpbml0aWFsJyAtIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBvciBqdXN0IGxlYWRpbmcgaW5kZW50YXRpb24uIGNhbiBiZSAnYWxsJyBvciAnaW5pdGlhbCdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3Qgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9ICh0eXBlID0gJ2luaXRpYWwnKSA9PiAoe1xuICBvbkVuZFJlc3VsdChlbmRSZXN1bHQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgIGNvbnN0IG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eW15cXFNcXG5dKig/PVxcUykvZ20pO1xuICAgICAgY29uc3QgaW5kZW50ID0gbWF0Y2ggJiYgTWF0aC5taW4oLi4ubWF0Y2gubWFwKGVsID0+IGVsLmxlbmd0aCkpO1xuICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKGBeLnske2luZGVudH19YCwgJ2dtJyk7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHQucmVwbGFjZShyZWdleHAsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmRSZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnYWxsJykge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBmcm9tIGVhY2ggbGluZVxuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eW15cXFNcXG5dKy9nbSwgJycpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXI7XG4iXX0=","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIkVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLElBQU1BLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQzlEQyxlQUQ4RCx1QkFDbERDLFNBRGtELEVBQ3ZDO0FBQ3JCLFVBQUlILGVBQWUsSUFBZixJQUF1QkMsZUFBZSxJQUExQyxFQUFnRDtBQUM5QyxjQUFNLElBQUlHLEtBQUosQ0FDSix5REFESSxDQUFOO0FBR0Q7QUFDRCxhQUFPRCxVQUFVRSxPQUFWLENBQWtCTCxXQUFsQixFQUErQkMsV0FBL0IsQ0FBUDtBQUNEO0FBUjZELEdBQS9CO0FBQUEsQ0FBakM7O0FBV0EsZUFBZUYsd0JBQWYiLCJmaWxlIjoicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXBsYWNlcyB0YWJzLCBuZXdsaW5lcyBhbmQgc3BhY2VzIHdpdGggdGhlIGNob3NlbiB2YWx1ZSB3aGVuIHRoZXkgb2NjdXIgaW4gc2VxdWVuY2VzXG4gKiBAcGFyYW0gIHsoU3RyaW5nfFJlZ0V4cCl9IHJlcGxhY2VXaGF0IC0gdGhlIHZhbHVlIG9yIHBhdHRlcm4gdGhhdCBzaG91bGQgYmUgcmVwbGFjZWRcbiAqIEBwYXJhbSAgeyp9ICAgICAgICAgICAgICAgcmVwbGFjZVdpdGggLSB0aGUgcmVwbGFjZW1lbnQgdmFsdWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciA9IChyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciByZXF1aXJlcyBhdCBsZWFzdCAyIGFyZ3VtZW50cy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyO1xuIl19","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      }\n\n      // Do not touch if null or undefined\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQ3BFQyxrQkFEb0UsMEJBQ3JEQyxZQURxRCxFQUN2Q0MsV0FEdUMsRUFDMUI7QUFDeEMsVUFBSUosZUFBZSxJQUFmLElBQXVCQyxlQUFlLElBQTFDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUksS0FBSixDQUNKLCtEQURJLENBQU47QUFHRDs7QUFFRDtBQUNBLFVBQUlGLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QixlQUFPQSxZQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsYUFBYUcsUUFBYixHQUF3QkMsT0FBeEIsQ0FBZ0NQLFdBQWhDLEVBQTZDQyxXQUE3QyxDQUFQO0FBQ0Q7QUFDRjtBQWRtRSxHQUEvQjtBQUFBLENBQXZDOztBQWlCQSxlQUFlRiw4QkFBZiIsImZpbGUiOiJyZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgPSAocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgaWYgKHJlcGxhY2VXaGF0ID09IG51bGwgfHwgcmVwbGFjZVdpdGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCB0b3VjaCBpZiBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGlmIChzdWJzdGl0dXRpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbi50b1N0cmluZygpLnJlcGxhY2UocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKTtcbiAgICB9XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyO1xuIl19","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial;\n        // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        }\n        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2lubGluZUFycmF5VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiIsInNlcmlhbCIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJvcHRzIiwib25TdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb24iLCJyZXN1bHRTb0ZhciIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5TGVuZ3RoIiwibGVuZ3RoIiwiaW5kZW50IiwibWF0Y2giLCJqb2luIiwic2VwYXJhdG9ySW5kZXgiLCJsYXN0SW5kZXhPZiIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXO0FBQ2ZDLGFBQVcsRUFESTtBQUVmQyxlQUFhLEVBRkU7QUFHZkMsVUFBUTtBQUhPLENBQWpCOztBQU1BOzs7Ozs7OztBQVFBLElBQU1DLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUUwsUUFBUjtBQUFBLFNBQXNCO0FBQ25ETSxrQkFEbUQsMEJBQ3BDQyxZQURvQyxFQUN0QkMsV0FEc0IsRUFDVDtBQUN4QztBQUNBLFVBQUlDLE1BQU1DLE9BQU4sQ0FBY0gsWUFBZCxDQUFKLEVBQWlDO0FBQy9CLFlBQU1JLGNBQWNKLGFBQWFLLE1BQWpDO0FBQ0EsWUFBTVgsWUFBWUksS0FBS0osU0FBdkI7QUFDQSxZQUFNQyxjQUFjRyxLQUFLSCxXQUF6QjtBQUNBLFlBQU1DLFNBQVNFLEtBQUtGLE1BQXBCO0FBQ0E7QUFDQTtBQUNBLFlBQU1VLFNBQVNMLFlBQVlNLEtBQVosQ0FBa0IsZ0JBQWxCLENBQWY7QUFDQSxZQUFJRCxNQUFKLEVBQVk7QUFDVk4seUJBQWVBLGFBQWFRLElBQWIsQ0FBa0JkLFlBQVlZLE9BQU8sQ0FBUCxDQUE5QixDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLHlCQUFlQSxhQUFhUSxJQUFiLENBQWtCZCxZQUFZLEdBQTlCLENBQWY7QUFDRDtBQUNEO0FBQ0EsWUFBSUMsZUFBZVMsY0FBYyxDQUFqQyxFQUFvQztBQUNsQyxjQUFNSyxpQkFBaUJULGFBQWFVLFdBQWIsQ0FBeUJoQixTQUF6QixDQUF2QjtBQUNBTSx5QkFDRUEsYUFBYVcsS0FBYixDQUFtQixDQUFuQixFQUFzQkYsY0FBdEIsS0FDQ2IsU0FBU0YsU0FBVCxHQUFxQixFQUR0QixJQUVBLEdBRkEsR0FHQUMsV0FIQSxHQUlBSyxhQUFhVyxLQUFiLENBQW1CRixpQkFBaUIsQ0FBcEMsQ0FMRjtBQU1EO0FBQ0Y7QUFDRCxhQUFPVCxZQUFQO0FBQ0Q7QUE1QmtELEdBQXRCO0FBQUEsQ0FBL0I7O0FBK0JBLGVBQWVILHNCQUFmIiwiZmlsZSI6ImlubGluZUFycmF5VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0cyA9IHtcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29uanVuY3Rpb246ICcnLFxuICBzZXJpYWw6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBzdWJzdGl0dXRpb24gdG8gYSBzdHJpbmcgY29udGFpbmluZyBhIGxpc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gJyddIC0gdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyBlYWNoIGl0ZW1cbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuY29uanVuY3Rpb24gPSAnJ10gIC0gcmVwbGFjZSB0aGUgbGFzdCBzZXBhcmF0b3Igd2l0aCB0aGlzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0cy5zZXJpYWwgPSBmYWxzZV0gLSBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYmVmb3JlIHRoZSBjb25qdW5jdGlvbj8gKE94Zm9yZCBjb21tYSB1c2UtY2FzZSlcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgPSAob3B0cyA9IGRlZmF1bHRzKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgLy8gb25seSBvcGVyYXRlIG9uIGFycmF5c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gc3Vic3RpdHV0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yO1xuICAgICAgY29uc3QgY29uanVuY3Rpb24gPSBvcHRzLmNvbmp1bmN0aW9uO1xuICAgICAgY29uc3Qgc2VyaWFsID0gb3B0cy5zZXJpYWw7XG4gICAgICAvLyBqb2luIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW50byBhIHN0cmluZyB3aGVyZSBlYWNoIGl0ZW0gaXMgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvclxuICAgICAgLy8gYmUgc3VyZSB0byBtYWludGFpbiBpbmRlbnRhdGlvblxuICAgICAgY29uc3QgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXG4/W15cXFNcXG5dKykkLyk7XG4gICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5qb2luKHNlcGFyYXRvciArIGluZGVudFsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyAnICcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgY29uanVuY3Rpb24gaXMgc2V0LCByZXBsYWNlIHRoZSBsYXN0IHNlcGFyYXRvciB3aXRoIGNvbmp1bmN0aW9uLCBidXQgb25seSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHN1YnN0aXR1dGlvblxuICAgICAgaWYgKGNvbmp1bmN0aW9uICYmIGFycmF5TGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN1YnN0aXR1dGlvbi5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBzdWJzdGl0dXRpb24gPVxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCkgK1xuICAgICAgICAgIChzZXJpYWwgPyBzZXBhcmF0b3IgOiAnJykgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgY29uanVuY3Rpb24gK1xuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUFycmF5VHJhbnNmb3JtZXI7XG4iXX0=","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwicmVzdWx0U29GYXIiLCJzcGxpdEJ5IiwiaW5jbHVkZXMiLCJzcGxpdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSx5QkFBeUIsU0FBekJBLHNCQUF5QjtBQUFBLFNBQVk7QUFDekNDLGtCQUR5QywwQkFDMUJDLFlBRDBCLEVBQ1pDLFdBRFksRUFDQztBQUN4QyxVQUFJQyxXQUFXLElBQVgsSUFBbUIsT0FBT0EsT0FBUCxLQUFtQixRQUExQyxFQUFvRDtBQUNsRCxZQUFJLE9BQU9GLFlBQVAsS0FBd0IsUUFBeEIsSUFBb0NBLGFBQWFHLFFBQWIsQ0FBc0JELE9BQXRCLENBQXhDLEVBQXdFO0FBQ3RFRix5QkFBZUEsYUFBYUksS0FBYixDQUFtQkYsT0FBbkIsQ0FBZjtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsY0FBTSxJQUFJRyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0wsWUFBUDtBQUNEO0FBVndDLEdBQVo7QUFBQSxDQUEvQjs7QUFhQSxlQUFlRixzQkFBZiIsImZpbGUiOiJzcGxpdFN0cmluZ1RyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciA9IHNwbGl0QnkgPT4gKHtcbiAgb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChzcGxpdEJ5ICE9IG51bGwgJiYgdHlwZW9mIHNwbGl0QnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgJiYgc3Vic3RpdHV0aW9uLmluY2x1ZGVzKHNwbGl0QnkpKSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgc3RyaW5nIGNoYXJhY3RlciB0byBzcGxpdCBieS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyO1xuIl19","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiaXNWYWxpZFZhbHVlIiwieCIsIk51bWJlciIsImlzTmFOIiwicmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQkMsS0FBSyxJQUFMLElBQWEsQ0FBQ0MsT0FBT0MsS0FBUCxDQUFhRixDQUFiLENBQWQsSUFBaUMsT0FBT0EsQ0FBUCxLQUFhLFNBRDNCO0FBQUEsQ0FBckI7O0FBR0EsSUFBTUcscUNBQXFDLFNBQXJDQSxrQ0FBcUM7QUFBQSxTQUFPO0FBQ2hEQyxrQkFEZ0QsMEJBQ2pDQyxZQURpQyxFQUNuQjtBQUMzQixVQUFJQyxNQUFNQyxPQUFOLENBQWNGLFlBQWQsQ0FBSixFQUFpQztBQUMvQixlQUFPQSxhQUFhRyxNQUFiLENBQW9CVCxZQUFwQixDQUFQO0FBQ0Q7QUFDRCxVQUFJQSxhQUFhTSxZQUFiLENBQUosRUFBZ0M7QUFDOUIsZUFBT0EsWUFBUDtBQUNEO0FBQ0QsYUFBTyxFQUFQO0FBQ0Q7QUFUK0MsR0FBUDtBQUFBLENBQTNDOztBQVlBLGVBQWVGLGtDQUFmIiwiZmlsZSI6InJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1ZhbGlkVmFsdWUgPSB4ID0+XG4gIHggIT0gbnVsbCAmJiAhTnVtYmVyLmlzTmFOKHgpICYmIHR5cGVvZiB4ICE9PSAnYm9vbGVhbic7XG5cbmNvbnN0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgPSAoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmZpbHRlcihpc1ZhbGlkVmFsdWUpO1xuICAgIH1cbiAgICBpZiAoaXNWYWxpZFZhbHVlKHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\n\nexport default stripIndent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9zdHJpcEluZGVudC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJzdHJpcEluZGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsY0FBYyxJQUFJSCxXQUFKLENBQ2xCQyxzQkFEa0IsRUFFbEJDLHFCQUZrQixDQUFwQjs7QUFLQSxlQUFlQyxXQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBzdHJpcEluZGVudCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnQ7XG4iXX0=","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHMiLCJzZXBhcmF0b3IiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGFBQWEsSUFBSUosV0FBSixDQUNqQkUsdUJBQXVCLEVBQUVHLFdBQVcsR0FBYixFQUF2QixDQURpQixFQUVqQkosc0JBRmlCLEVBR2pCRSxxQkFIaUIsQ0FBbkI7O0FBTUEsZUFBZUMsVUFBZiIsImZpbGUiOiJjb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGNvbW1hTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2NvbW1hTGlzdHNBbmQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHNBbmQiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZ0JBQWdCLElBQUlKLFdBQUosQ0FDcEJFLHVCQUF1QixFQUFFRyxXQUFXLEdBQWIsRUFBa0JDLGFBQWEsS0FBL0IsRUFBdkIsQ0FEb0IsRUFFcEJMLHNCQUZvQixFQUdwQkUscUJBSG9CLENBQXRCOztBQU1BLGVBQWVDLGFBQWYiLCJmaWxlIjoiY29tbWFMaXN0c0FuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvY29tbWFMaXN0c09yLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzT3IiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSixXQUFKLENBQ25CRSx1QkFBdUIsRUFBRUcsV0FBVyxHQUFiLEVBQWtCQyxhQUFhLElBQS9CLEVBQXZCLENBRG1CLEVBRW5CTCxzQkFGbUIsRUFHbkJFLHFCQUhtQixDQUFyQjs7QUFNQSxlQUFlQyxZQUFmIiwiZmlsZSI6ImNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJywgY29uanVuY3Rpb246ICdvcicgfSksXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNPcjtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default html;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2h0bWwuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNwbGl0U3RyaW5nVHJhbnNmb3JtZXIiLCJyZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxrQ0FBUCxNQUErQyx1Q0FBL0M7O0FBRUEsSUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQ1hJLHVCQUF1QixJQUF2QixDQURXLEVBRVhDLGtDQUZXLEVBR1hILHNCQUhXLEVBSVhELHNCQUpXLEVBS1hFLHFCQUxXLENBQWI7O0FBUUEsZUFBZUcsSUFBZiIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJztcbmltcG9ydCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIGZyb20gJy4uL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXInO1xuXG5jb25zdCBodG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcixcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgaHRtbDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\n\nexport default safeHtml;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9zYWZlSHRtbC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInNhZmVIdG1sIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLDhCQUFQLE1BQTJDLG1DQUEzQzs7QUFFQSxJQUFNQyxXQUFXLElBQUlOLFdBQUosQ0FDZkksdUJBQXVCLElBQXZCLENBRGUsRUFFZkYsc0JBRmUsRUFHZkQsc0JBSGUsRUFJZkUscUJBSmUsRUFLZkUsK0JBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBTGUsRUFNZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBTmUsRUFPZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBUGUsRUFRZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBUmUsRUFTZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVGUsRUFVZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVmUsQ0FBakI7O0FBYUEsZUFBZUMsUUFBZiIsImZpbGUiOiJzYWZlSHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcic7XG5cbmNvbnN0IHNhZmVIdG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLyYvZywgJyZhbXA7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvPC9nLCAnJmx0OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLz4vZywgJyZndDsnKSxcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC9cIi9nLCAnJnF1b3Q7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvJy9nLCAnJiN4Mjc7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvYC9nLCAnJiN4NjA7JyksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBzYWZlSHRtbDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\n\nexport default oneLine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL29uZUxpbmUuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxVQUFVLElBQUlILFdBQUosQ0FDZEUseUJBQXlCLGlCQUF6QixFQUE0QyxHQUE1QyxDQURjLEVBRWRELHFCQUZjLENBQWhCOztBQUtBLGVBQWVFLE9BQWYiLCJmaWxlIjoib25lTGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmUgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuKD86XFxzKikpKy9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\n\nexport default oneLineTrim;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9vbmVMaW5lVHJpbS5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVUcmltIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxjQUFjLElBQUlILFdBQUosQ0FDbEJFLHlCQUF5QixZQUF6QixFQUF1QyxFQUF2QyxDQURrQixFQUVsQkQscUJBRmtCLENBQXBCOztBQUtBLGVBQWVFLFdBQWYiLCJmaWxlIjoib25lTGluZVRyaW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lVHJpbSA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXG5cXHMqKS9nLCAnJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVUcmltO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0cyIsInNlcGFyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMsb0JBQW9CLElBQUlKLFdBQUosQ0FDeEJDLHVCQUF1QixFQUFFSSxXQUFXLEdBQWIsRUFBdkIsQ0FEd0IsRUFFeEJGLHlCQUF5QixVQUF6QixFQUFxQyxHQUFyQyxDQUZ3QixFQUd4QkQscUJBSHdCLENBQTFCOztBQU1BLGVBQWVFLGlCQUFmIiwiZmlsZSI6Im9uZUxpbmVDb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnIH0pLFxuICByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVDb21tYUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL29uZUxpbmVDb21tYUxpc3RzT3IuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIiwib25lTGluZUNvbW1hTGlzdHNPciIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxzQkFBc0IsSUFBSUosV0FBSixDQUMxQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxJQUEvQixFQUF2QixDQUQwQixFQUUxQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjBCLEVBRzFCRCxxQkFIMEIsQ0FBNUI7O0FBTUEsZUFBZUUsbUJBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgb25lTGluZUNvbW1hTGlzdHNPciA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnLCBjb25qdW5jdGlvbjogJ29yJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c09yO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9vbmVMaW5lQ29tbWFMaXN0c0FuZC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0c0FuZCIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyx1QkFBdUIsSUFBSUosV0FBSixDQUMzQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxLQUEvQixFQUF2QixDQUQyQixFQUUzQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjJCLEVBRzNCRCxxQkFIMkIsQ0FBN0I7O0FBTUEsZUFBZUUsb0JBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNBbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default inlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwiaW5saW5lTGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGNBQWMsSUFBSUosV0FBSixDQUNsQkUsc0JBRGtCLEVBRWxCRCxzQkFGa0IsRUFHbEJFLHFCQUhrQixDQUFwQjs7QUFNQSxlQUFlQyxXQUFmIiwiZmlsZSI6ImlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyLFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmxpbmVMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineInlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvb25lTGluZUlubGluZUxpc3RzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVJbmxpbmVMaXN0cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMscUJBQXFCLElBQUlKLFdBQUosQ0FDekJDLHNCQUR5QixFQUV6QkUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRnlCLEVBR3pCRCxxQkFIeUIsQ0FBM0I7O0FBTUEsZUFBZUUsa0JBQWYiLCJmaWxlIjoib25lTGluZUlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lSW5saW5lTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUlubGluZUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\n\nexport default stripIndents;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSCxXQUFKLENBQ25CQyx1QkFBdUIsS0FBdkIsQ0FEbUIsRUFFbkJDLHFCQUZtQixDQUFyQjs7QUFLQSxlQUFlQyxZQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgc3RyaXBJbmRlbnRzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyKCdhbGwnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnRzO1xuIl19","import React, { PureComponent } from 'react';\nimport { stripIndent, stripIndents } from 'common-tags';\nimport { ExploreStartPageProps } from '@grafana/data';\nimport Prism from 'prismjs';\nimport tokenizer from '../syntax';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\nimport { css, cx } from 'emotion';\nimport { CloudWatchLogsQuery } from '../types';\n\ninterface QueryExample {\n  category: string;\n  examples: Array<{\n    title: string;\n    expr: string;\n  }>;\n}\n\nconst CLIQ_EXAMPLES: QueryExample[] = [\n  {\n    category: 'Lambda',\n    examples: [\n      {\n        title: 'View latency statistics for 5-minute intervals',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`,\n      },\n      {\n        title: 'Determine the amount of overprovisioned memory',\n        expr: stripIndent`\n        filter @type = \"REPORT\" |\n        stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n              min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n              avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n              max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n              provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB`,\n      },\n      {\n        title: 'Find the most expensive requests',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           fields @requestId, @billedDuration |\n                           sort by @billedDuration desc`,\n      },\n    ],\n  },\n\n  {\n    category: 'VPC Flow Logs',\n    examples: [\n      {\n        title: 'Average, min, and max byte transfers by source and destination IP addresses',\n        expr: `stats avg(bytes), min(bytes), max(bytes) by srcAddr, dstAddr`,\n      },\n      {\n        title: 'IP addresses using UDP transfer protocol',\n        expr: 'filter protocol=17 | stats count(*) by srcAddr',\n      },\n      {\n        title: 'Top 10 byte transfers by source and destination IP addresses',\n        expr: stripIndents`stats sum(bytes) as bytesTransferred by srcAddr, dstAddr |\n                           sort bytesTransferred desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 20 source IP addresses with highest number of rejected requests',\n        expr: stripIndents`filter action=\"REJECT\" |\n                           stats count(*) as numRejections by srcAddr |\n                           sort numRejections desc |\n                           limit 20`,\n      },\n    ],\n  },\n  {\n    category: 'CloudTrail',\n    examples: [\n      {\n        title: 'Number of log entries by service, event type, and region',\n        expr: 'stats count(*) by eventSource, eventName, awsRegion',\n      },\n\n      {\n        title: 'Number of log entries by region and EC2 event type',\n        expr: stripIndents`filter eventSource=\"ec2.amazonaws.com\" |\n                           stats count(*) as eventCount by eventName, awsRegion |\n                           sort eventCount desc`,\n      },\n\n      {\n        title: 'Regions, usernames, and ARNs of newly created IAM users',\n        expr: stripIndents`filter eventName=\"CreateUser\" |\n                           fields awsRegion, requestParameters.userName, responseElements.user.arn`,\n      },\n    ],\n  },\n  {\n    category: 'Common Queries',\n    examples: [\n      {\n        title: '25 most recently added log events',\n        expr: stripIndents`fields @timestamp, @message |\n                           sort @timestamp desc |\n                           limit 25`,\n      },\n      {\n        title: 'Number of exceptions logged every 5 minutes',\n        expr: stripIndents`filter @message like /Exception/ |\n                           stats count(*) as exceptionCount by bin(5m) |\n                           sort exceptionCount desc`,\n      },\n      {\n        title: 'List of log events that are not exceptions',\n        expr: 'fields @message | filter @message not like /Exception/',\n      },\n    ],\n  },\n  {\n    category: 'Route 53',\n    examples: [\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) by queryType, bin(10m)',\n      },\n      {\n        title: 'Number of unsuccessful requests by domain',\n        expr: 'filter responseCode=\"SERVFAIL\" | stats count(*) by queryName',\n      },\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) as numRequests by resolverIp | sort numRequests desc | limit 10',\n      },\n    ],\n  },\n  {\n    category: 'AWS AppSync',\n    examples: [\n      {\n        title: 'Number of unique HTTP status codes',\n        expr: stripIndents`fields ispresent(graphQLAPIId) as isApi |\n                           filter isApi |\n                           filter logType = \"RequestSummary\" |\n                           stats count() as statusCount by statusCode |\n                           sort statusCount desc`,\n      },\n      {\n        title: 'Top 10 resolvers with maximum latency',\n        expr: stripIndents`fields resolverArn, duration |\n                           filter logType = \"Tracing\" |\n                           sort duration desc |\n                           limit 10`,\n      },\n      {\n        title: 'Most frequently invoked resolvers',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as invocationCount by resolverArn |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           sort invocationCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolvers with most errors in mapping templates',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as errorCount by resolverArn, logType |\n                           filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError |\n                           sort errorCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Field latency statistics',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolver latency statistics',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           stats min(duration), max(duration), avg(duration) as avgDur by resolverArn |\n                           sort avgDur desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 10 requests with maximum latency',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n    ],\n  },\n];\n\nfunction renderHighlightedMarkup(code: string, keyPrefix: string) {\n  const grammar = Prism.languages['cloudwatch'] ?? tokenizer;\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens\n    .filter(token => typeof token !== 'string')\n    .map((token, i) => {\n      return (\n        <span\n          className={`prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`}\n          key={`${keyPrefix}-token-${i}`}\n        >\n          {token.content}\n        </span>\n      );\n    });\n\n  return <div className=\"slate-query-field\">{spans}</div>;\n}\n\nconst exampleCategory = css`\n  margin-top: 5px;\n`;\n\nexport default class LogsCheatSheet extends PureComponent<ExploreStartPageProps, { userExamples: string[] }> {\n  onClickExample(query: CloudWatchLogsQuery) {\n    this.props.onClickExample(query);\n  }\n\n  renderExpression(expr: string, keyPrefix: string) {\n    return (\n      <div\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={e =>\n          this.onClickExample({ refId: 'A', expression: expr, queryMode: 'Logs', region: 'default', id: 'A' })\n        }\n      >\n        <pre>{renderHighlightedMarkup(expr, keyPrefix)}</pre>\n      </div>\n    );\n  }\n\n  renderLogsCheatSheet() {\n    return (\n      <div>\n        <h2>CloudWatch Logs Cheat Sheet</h2>\n        {CLIQ_EXAMPLES.map(cat => (\n          <div>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, i) => (\n              <div className=\"cheat-sheet-item\" key={`item-${i}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${i}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>CloudWatch Logs Cheat Sheet</h2>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`cat-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import './query_parameter_ctrl';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { CloudWatchAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\nimport { CloudWatchLogsQueryEditor } from './components/LogsQueryEditor';\nimport { PanelQueryEditor } from './components/PanelQueryEditor';\nimport LogsCheatSheet from './components/LogsCheatSheet';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setExploreStartPage(LogsCheatSheet)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(PanelQueryEditor)\n  .setExploreMetricsQueryField(PanelQueryEditor)\n  .setExploreLogsQueryField(CloudWatchLogsQueryEditor)\n  .setAnnotationQueryCtrl(CloudWatchAnnotationsQueryCtrl);\n","// https://github.com/facebook/react/issues/5465\n\nexport interface CancelablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n    promise.then(val => (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val)));\n    promise.catch(error => (hasCanceled_ ? reject({ isCanceled: true }) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n"],"sourceRoot":""}