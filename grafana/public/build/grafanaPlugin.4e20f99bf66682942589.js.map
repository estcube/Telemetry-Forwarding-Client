{"version":3,"sources":["webpack:///./public/app/plugins/datasource/grafana/datasource.ts","webpack:///./public/app/plugins/datasource/grafana/module.ts"],"names":["GrafanaDatasource","instanceSettings","options","getBackendSrv","get","from","range","valueOf","to","intervalMs","maxDataPoints","then","res","data","results","_","forEach","queryRes","series","push","target","name","datapoints","points","Promise","resolve","params","limit","annotation","tags","matchAny","type","dashboard","id","dashboardId","isArray","length","t","renderedValues","templateSrv","replace","value","join","split","tt","DataSourceApi","GrafanaQueryCtrl","QueryCtrl","templateUrl","GrafanaAnnotationsQueryCtrl","types","text","this"],"mappings":"28BAMMA,E,YAEJ,WAAYC,GAA8C,O,4FAAA,+BAClDA,I,4TAGFC,GACJ,OAAOC,0BACJC,IAAI,iCAAkC,CACrCC,KAAMH,EAAQI,MAAMD,KAAKE,UACzBC,GAAIN,EAAQI,MAAME,GAAGD,UACrBE,WAAYP,EAAQO,WACpBC,cAAeR,EAAQQ,gBAExBC,MAAK,SAACC,GACL,IAAMC,EAAc,GAapB,OAXID,EAAIE,SACNC,IAAEC,QAAQJ,EAAIE,SAAS,SAAAG,GAAY,2BACjC,YAAqBA,EAASC,OAA9B,+CAAsC,KAA3BA,EAA2B,QACpCL,EAAKM,KAAK,CACRC,OAAQF,EAAOG,KACfC,WAAYJ,EAAOK,UAJU,sFAU9B,CAAEV,KAAMA,Q,sCAILX,GACd,OAAOsB,QAAQC,QAAQ,M,sCAGTvB,GAAc,MACtBwB,EAAc,CAClBrB,KAAMH,EAAQI,MAAMD,KAAKE,UACzBC,GAAIN,EAAQI,MAAME,GAAGD,UACrBoB,MAAOzB,EAAQ0B,WAAWD,MAC1BE,KAAM3B,EAAQ0B,WAAWC,KACzBC,SAAU5B,EAAQ0B,WAAWE,UAG/B,GAAgC,cAA5B5B,EAAQ0B,WAAWG,KAAsB,CAE3C,IAAK7B,EAAQ8B,UAAUC,GACrB,OAAOT,QAAQC,QAAQ,IAGzBC,EAAOQ,YAAchC,EAAQ8B,UAAUC,UAEhCP,EAAOG,SACT,kBAEL,IAAKd,IAAEoB,QAAQjC,EAAQ0B,WAAWC,OAA4C,IAAnC3B,EAAQ0B,WAAWC,KAAKO,OACjE,SAAOZ,QAAQC,QAAQ,KAEzB,IACMI,EAAO,GANR,uBAOL,YAAgBH,EAAOG,KAAvB,+CAA6B,KAAlBQ,EAAkB,QACrBC,EAAiBC,IAAYC,QAAQH,EAAG,IAAI,SAACI,GACjD,MAAqB,iBAAVA,EACFA,EAGFA,EAAMC,KARC,oBAEW,uBAQ3B,YAAiBJ,EAAeK,MAVhB,iBAUhB,+CAAkD,KAAvCC,EAAuC,QAChDf,EAAKV,KAAKyB,IATe,oFAPxB,kFAmBLlB,EAAOG,KAAOA,EAnBT,iCAsBP,OAAO1B,0BAAgBC,IACrB,mBACAsB,EAFK,0CAG8BxB,EAAQ0B,WAAWP,KAHjD,sBAGyDnB,EAAQ8B,iBAHjE,aAGyD,EAAmBC,O,uCAKnF,OAAOT,QAAQC,e,8BApFaoB,iB,26BCH1BC,E,+TAAyBC,aAAzBD,EACGE,YAAc,6B,IAGjBC,EAQJ,aAAc,eALdC,MAAQ,CACN,CAAEC,KAAM,YAAaV,MAAO,aAC5B,CAAEU,KAAM,OAAQV,MAAO,SAIvBW,KAAKxB,WAAWG,KAAOqB,KAAKxB,WAAWG,MAAQ,OAC/CqB,KAAKxB,WAAWD,MAAQyB,KAAKxB,WAAWD,OAAS,KAV/CsB,EAaGD,YAAc","file":"grafanaPlugin.4e20f99bf66682942589.js","sourcesContent":["import _ from 'lodash';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { DataSourceApi, DataSourceInstanceSettings } from '@grafana/data';\n\nimport templateSrv from 'app/features/templating/template_srv';\n\nclass GrafanaDatasource extends DataSourceApi<any> {\n  /** @ngInject */\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(options: any) {\n    return getBackendSrv()\n      .get('/api/tsdb/testdata/random-walk', {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n      })\n      .then((res: any) => {\n        const data: any[] = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  metricFindQuery(options: any) {\n    return Promise.resolve([]);\n  }\n\n  annotationQuery(options: any) {\n    const params: any = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.annotation.limit,\n      tags: options.annotation.tags,\n      matchAny: options.annotation.matchAny,\n    };\n\n    if (options.annotation.type === 'dashboard') {\n      // if no dashboard id yet return\n      if (!options.dashboard.id) {\n        return Promise.resolve([]);\n      }\n      // filter by dashboard id\n      params.dashboardId = options.dashboard.id;\n      // remove tags filter if any\n      delete params.tags;\n    } else {\n      // require at least one tag\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\n        return Promise.resolve([]);\n      }\n      const delimiter = '__delimiter__';\n      const tags = [];\n      for (const t of params.tags) {\n        const renderedValues = templateSrv.replace(t, {}, (value: any) => {\n          if (typeof value === 'string') {\n            return value;\n          }\n\n          return value.join(delimiter);\n        });\n        for (const tt of renderedValues.split(delimiter)) {\n          tags.push(tt);\n        }\n      }\n      params.tags = tags;\n    }\n\n    return getBackendSrv().get(\n      '/api/annotations',\n      params,\n      `grafana-data-source-annotations-${options.annotation.name}-${options.dashboard?.id}`\n    );\n  }\n\n  testDatasource() {\n    return Promise.resolve();\n  }\n}\n\nexport { GrafanaDatasource };\n","import { GrafanaDatasource } from './datasource';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nclass GrafanaQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n}\n\nclass GrafanaAnnotationsQueryCtrl {\n  annotation: any;\n\n  types = [\n    { text: 'Dashboard', value: 'dashboard' },\n    { text: 'Tags', value: 'tags' },\n  ];\n\n  constructor() {\n    this.annotation.type = this.annotation.type || 'tags';\n    this.annotation.limit = this.annotation.limit || 100;\n  }\n\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GrafanaDatasource,\n  GrafanaDatasource as Datasource,\n  GrafanaQueryCtrl as QueryCtrl,\n  GrafanaAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}